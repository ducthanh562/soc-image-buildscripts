From bf3c6a73e353916996adb0e435f47c976859152e Mon Sep 17 00:00:00 2001
From: Michael Brown <producer@holotronic.dk>
Date: Sun, 8 Apr 2018 22:39:54 +0200
Subject: [PATCH 11/12] Add midi drivers for holosynth and audio for builtin
 audio codec on de1 board

Signed-off-by: Michael Brown <producer@holotronic.dk>
---
 sound/soc/Kconfig                        |   3 +-
 sound/soc/Makefile                       |   1 +
 sound/soc/codecs/wm8731.c                |  25 +-
 sound/soc/socsynth/Kconfig               |  15 +
 sound/soc/socsynth/Makefile              |   5 +
 sound/soc/socsynth/de1-soc-wm8731-midi.c | 486 +++++++++++++++++++++++++++++++
 sound/soc/socsynth/de1-soc-wm8731.c      | 250 ++++++++++++++++
 sound/soc/socsynth/opencores_i2s.c       | 447 ++++++++++++++++++++++++++++
 sound/soc/socsynth/socmidi.c             | 292 +++++++++++++++++++
 9 files changed, 1518 insertions(+), 6 deletions(-)
 create mode 100644 sound/soc/socsynth/Kconfig
 create mode 100644 sound/soc/socsynth/Makefile
 create mode 100644 sound/soc/socsynth/de1-soc-wm8731-midi.c
 create mode 100644 sound/soc/socsynth/de1-soc-wm8731.c
 create mode 100644 sound/soc/socsynth/opencores_i2s.c
 create mode 100644 sound/soc/socsynth/socmidi.c

diff --git a/sound/soc/Kconfig b/sound/soc/Kconfig
index 182d92e..48d18da 100644
--- a/sound/soc/Kconfig
+++ b/sound/soc/Kconfig
@@ -13,7 +13,7 @@ menuconfig SND_SOC
 
 	  If you want ASoC support, you should say Y here and also to the
 	  specific driver for your SoC platform below.
-	  
+
 	  ASoC provides power efficient ALSA support for embedded battery powered
 	  SoC based systems like PDA's, Phones and Personal Media Players.
 
@@ -62,6 +62,7 @@ source "sound/soc/samsung/Kconfig"
 source "sound/soc/sh/Kconfig"
 source "sound/soc/sirf/Kconfig"
 source "sound/soc/spear/Kconfig"
+source "sound/soc/socsynth/Kconfig"
 source "sound/soc/sti/Kconfig"
 source "sound/soc/sunxi/Kconfig"
 source "sound/soc/tegra/Kconfig"
diff --git a/sound/soc/Makefile b/sound/soc/Makefile
index 9a30f21..c802f47 100644
--- a/sound/soc/Makefile
+++ b/sound/soc/Makefile
@@ -42,6 +42,7 @@ obj-$(CONFIG_SND_SOC)	+= samsung/
 obj-$(CONFIG_SND_SOC)	+= sh/
 obj-$(CONFIG_SND_SOC)	+= sirf/
 obj-$(CONFIG_SND_SOC)	+= spear/
+obj-$(CONFIG_SND_SOC)	+= socsynth/
 obj-$(CONFIG_SND_SOC)	+= sti/
 obj-$(CONFIG_SND_SOC)	+= sunxi/
 obj-$(CONFIG_SND_SOC)	+= tegra/
diff --git a/sound/soc/codecs/wm8731.c b/sound/soc/codecs/wm8731.c
index 4f9a1eb..9eaeb69 100644
--- a/sound/soc/codecs/wm8731.c
+++ b/sound/soc/codecs/wm8731.c
@@ -81,10 +81,10 @@ static bool wm8731_volatile(struct device *dev, unsigned int reg)
 
 #define wm8731_reset(m)	regmap_write(m, WM8731_RESET, 0)
 
-static const char *wm8731_input_select[] = {"Line In", "Mic"};
+static const char *wm8731_input_select[] = {"Line In", "Synth In", "Mic"};
 
 static SOC_ENUM_SINGLE_DECL(wm8731_insel_enum,
-			    WM8731_APANA, 2, wm8731_input_select);
+			    WM8731_APANA, 3, wm8731_input_select);
 
 static int wm8731_deemph[] = { 0, 32000, 44100, 48000 };
 
@@ -152,6 +152,7 @@ static int wm8731_put_deemph(struct snd_kcontrol *kcontrol,
 }
 
 static const DECLARE_TLV_DB_SCALE(in_tlv, -3450, 150, 0);
+static const DECLARE_TLV_DB_SCALE(sin_tlv, -3450, 150, 0);
 static const DECLARE_TLV_DB_SCALE(sidetone_tlv, -1500, 300, 0);
 static const DECLARE_TLV_DB_SCALE(out_tlv, -12100, 100, 1);
 static const DECLARE_TLV_DB_SCALE(mic_tlv, 0, 2000, 0);
@@ -183,8 +184,9 @@ SOC_SINGLE_BOOL_EXT("Playback Deemphasis Switch", 0,
 /* Output Mixer */
 static const struct snd_kcontrol_new wm8731_output_mixer_controls[] = {
 SOC_DAPM_SINGLE("Line Bypass Switch", WM8731_APANA, 3, 1, 0),
-SOC_DAPM_SINGLE("Mic Sidetone Switch", WM8731_APANA, 5, 1, 0),
-SOC_DAPM_SINGLE("HiFi Playback Switch", WM8731_APANA, 4, 1, 0),
+SOC_DAPM_SINGLE("Synth Bypass Switch", WM8731_APANA, 4, 1, 0),
+SOC_DAPM_SINGLE("Mic Sidetone Switch", WM8731_APANA, 6, 1, 0),
+SOC_DAPM_SINGLE("HiFi Playback Switch", WM8731_APANA, 5, 1, 0),
 };
 
 /* Input mux */
@@ -205,10 +207,13 @@ SND_SOC_DAPM_OUTPUT("RHPOUT"),
 SND_SOC_DAPM_ADC("ADC", "HiFi Capture", WM8731_PWR, 2, 1),
 SND_SOC_DAPM_MUX("Input Mux", SND_SOC_NOPM, 0, 0, &wm8731_input_mux_controls),
 SND_SOC_DAPM_PGA("Line Input", WM8731_PWR, 0, 1, NULL, 0),
-SND_SOC_DAPM_MICBIAS("Mic Bias", WM8731_PWR, 1, 1),
+SND_SOC_DAPM_PGA("Synth Input", WM8731_PWR, 1, 1, NULL, 0),
+SND_SOC_DAPM_MICBIAS("Mic Bias", WM8731_PWR, 2, 1),
 SND_SOC_DAPM_INPUT("MICIN"),
 SND_SOC_DAPM_INPUT("RLINEIN"),
 SND_SOC_DAPM_INPUT("LLINEIN"),
+SND_SOC_DAPM_INPUT("SRLINEIN"),
+SND_SOC_DAPM_INPUT("SLLINEIN"),
 };
 
 static int wm8731_check_osc(struct snd_soc_dapm_widget *source,
@@ -228,6 +233,7 @@ static const struct snd_soc_dapm_route wm8731_intercon[] = {
 
 	/* output mixer */
 	{"Output Mixer", "Line Bypass Switch", "Line Input"},
+	{"Output Mixer", "Synth Bypass Switch", "Synth Input"},
 	{"Output Mixer", "HiFi Playback Switch", "DAC"},
 	{"Output Mixer", "Mic Sidetone Switch", "Mic Bias"},
 
@@ -239,12 +245,15 @@ static const struct snd_soc_dapm_route wm8731_intercon[] = {
 
 	/* input mux */
 	{"Input Mux", "Line In", "Line Input"},
+	{"Input Mux", "Synth In", "Synth Input"},
 	{"Input Mux", "Mic", "Mic Bias"},
 	{"ADC", NULL, "Input Mux"},
 
 	/* inputs */
 	{"Line Input", NULL, "LLINEIN"},
 	{"Line Input", NULL, "RLINEIN"},
+	{"Synth Input", NULL, "SLLINEIN"},
+	{"Synth Input", NULL, "SRLINEIN"},
 	{"Mic Bias", NULL, "MICIN"},
 };
 
@@ -568,6 +577,12 @@ static struct snd_soc_dai_driver wm8731_dai = {
 		.channels_max = 2,
 		.rates = WM8731_RATES,
 		.formats = WM8731_FORMATS,},
+	.capture = {
+		.stream_name = "Hsynth",
+		.channels_min = 1,
+		.channels_max = 2,
+		.rates = WM8731_RATES,
+		.formats = WM8731_FORMATS,},
 	.ops = &wm8731_dai_ops,
 	.symmetric_rates = 1,
 };
diff --git a/sound/soc/socsynth/Kconfig b/sound/soc/socsynth/Kconfig
new file mode 100644
index 0000000..41f55a2
--- /dev/null
+++ b/sound/soc/socsynth/Kconfig
@@ -0,0 +1,15 @@
+config SND_SOC_OC_I2S
+       tristate "OpenCores I2S Controller"
+       help
+         If you say yes to this option, support will be included for the
+         OpenCores I2S controller. For details see
+
+         This driver can also be built as a module.  If so, the module
+         will be called opencores_i2s.
+
+config SND_SOC_DE1_WM8731
+       tristate "DE1-Audio support"
+       select SND_SOC_WM8731
+       select SND_SOC_OC_I2S
+       select SND_RAWMIDI
+       select REGMAP_MMIO
diff --git a/sound/soc/socsynth/Makefile b/sound/soc/socsynth/Makefile
new file mode 100644
index 0000000..d8e2a3a
--- /dev/null
+++ b/sound/soc/socsynth/Makefile
@@ -0,0 +1,5 @@
+snd-soc-opencores_i2s-objs := opencores_i2s.o
+obj-$(CONFIG_SND_SOC_OC_I2S) += snd-soc-opencores_i2s.o
+
+snd-de1-soc-wm8731-midi-objs := de1-soc-wm8731-midi.o
+obj-$(CONFIG_SND_SOC_DE1_WM8731) += snd-de1-soc-wm8731-midi.o
diff --git a/sound/soc/socsynth/de1-soc-wm8731-midi.c b/sound/soc/socsynth/de1-soc-wm8731-midi.c
new file mode 100644
index 0000000..0c5adcc
--- /dev/null
+++ b/sound/soc/socsynth/de1-soc-wm8731-midi.c
@@ -0,0 +1,486 @@
+/*
+* de1-soc-wm8731 -- SoC audio for Terasic DE1-SoC board
+* Author: B. Steinsbo <bsteinsbo@gmail.com>
+*
+* Based on sam9g20_wm8731 by
+* Sedji Gaouaou <sedji.gaouaou@atmel.com>
+*
+* Licensed under the GPL-2.
+*/
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/clk.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/uaccess.h>
+#include <linux/ioport.h>
+#include <linux/io.h>
+#include <linux/gpio.h>
+#include <linux/of_gpio.h>
+
+#include <sound/core.h>
+#include <sound/seq_kernel.h>
+#include <sound/rawmidi.h>
+#include <sound/initval.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/soc.h>
+#include "../codecs/wm8731.h"
+
+#define SYNTHSOCSOUND_LOG_PREFIX "synthsound: "
+
+//#define HSYNTH_SYSCLK_MCLK 2
+
+#define MCLK_RATE_48K 12288000 /* fs*256 */
+#define MCLK_RATE_44K 16934400 /* fs*384 */
+
+#define midi_ins 0
+#define midi_outs 1
+
+#define MIDIREG_BASE 0xff200000
+#define MIDIREG_SIZE PAGE_SIZE
+#define MIDIREG_OFFSET 0x50000
+
+#define printe(...) pr_err(SYNTHSOCSOUND_LOG_PREFIX __VA_ARGS__)
+
+static unsigned int i2c_mux_gpio;
+
+static int snd_socmidi_open(struct snd_rawmidi_substream *substream);
+static int snd_socmidi_close(struct snd_rawmidi_substream *substream);
+static int hmidi_card_probe(struct snd_soc_card *card);
+static int hmidi_card_remove(struct snd_soc_card *card);
+static void snd_socmidi_transmit(unsigned char data);
+static void snd_socmidi_output_trigger(struct snd_rawmidi_substream *substream, int);
+static int hsound_midi_init(struct snd_card *card);
+static int soc_hsynth_init(struct snd_soc_pcm_runtime *rtd);
+
+void *midireg_mem;
+
+static int snd_socmidi_open(struct snd_rawmidi_substream *substream)
+{
+    return 0;
+}
+
+static int snd_socmidi_close(struct snd_rawmidi_substream *substream)
+{
+    return 0;
+}
+
+static int hmidi_card_probe(struct snd_soc_card *card)
+{
+    int err;
+
+    err = hsound_midi_init(card->snd_card);
+
+    if (err < 0) {
+        //		dev_dbg(&pdev->dev,"hsound_midi_init failed: %d\n", err);
+        return err;
+    }
+
+    return 0;
+}
+
+static int hmidi_card_remove(struct snd_soc_card *card)
+{
+    return 0;
+}
+
+static void snd_socmidi_transmit(unsigned char data){
+
+    iowrite8(data, midireg_mem);
+
+}
+
+static void snd_socmidi_output_trigger(struct snd_rawmidi_substream *substream, int up) {
+
+    if (!up)
+        return;
+
+    while (1) {
+        unsigned char data;
+        if (snd_rawmidi_transmit(substream, &data, 1) != 1)
+            break; /* no more data */
+        snd_socmidi_transmit(data);
+    }
+}
+
+static struct snd_rawmidi *g_rmidi;
+
+static struct snd_rawmidi_ops snd_socmidi_output_ops = {
+    .open = snd_socmidi_open,
+    .close = snd_socmidi_close,
+    .trigger = snd_socmidi_output_trigger,
+};
+
+static void pisnd_get_port_info(struct snd_rawmidi *rmidi, int number, struct snd_seq_port_info *seq_port_info)
+{
+    seq_port_info->type =
+    SNDRV_SEQ_PORT_TYPE_MIDI_GENERIC |
+    SNDRV_SEQ_PORT_TYPE_HARDWARE |
+    SNDRV_SEQ_PORT_TYPE_PORT;
+    seq_port_info->midi_voices = 0;
+}
+
+static struct snd_rawmidi_global_ops hsnd_global_ops = {.get_port_info = pisnd_get_port_info, };
+
+static int hsound_midi_init(struct snd_card *card)
+{
+    int err;
+    struct resource *res;
+
+    err = snd_rawmidi_new(card, "SocMIDI", 0, midi_outs, midi_ins, &g_rmidi);
+
+    if (err < 0) {
+        printe("snd_rawmidi_new failed: %d\n", err);
+        return err;
+    }
+
+    strcpy(g_rmidi->name, "Holosynth MIDI ");
+    //	strcat(g_rmidi->name, pisnd_spi_get_serial());
+
+    g_rmidi->info_flags = SNDRV_RAWMIDI_INFO_OUTPUT;
+    // rmidi->info_flags = SNDRV_RAWMIDI_INFO_OUTPUT |
+    //                     SNDRV_RAWMIDI_INFO_INPUT |
+    //                     SNDRV_RAWMIDI_INFO_DUPLEX;
+
+    g_rmidi->ops = &hsnd_global_ops;
+
+    g_rmidi->private_data = (void *)0;
+
+    snd_rawmidi_set_ops(g_rmidi, SNDRV_RAWMIDI_STREAM_OUTPUT, &snd_socmidi_output_ops);
+    //    snd_rawmidi_set_ops(rmidi, SNDRV_RAWMIDI_STREAM_INPUT, &snd_socmidi_input_ops);
+
+    res = request_mem_region((MIDIREG_BASE + MIDIREG_OFFSET), MIDIREG_SIZE, "MIDIREG");
+    if (res == NULL) {
+        return -EBUSY;
+    }
+
+    midireg_mem = ioremap((MIDIREG_BASE + MIDIREG_OFFSET), MIDIREG_SIZE);
+    if (midireg_mem == NULL) {
+        release_mem_region(MIDIREG_BASE, MIDIREG_SIZE);
+        return -EFAULT;
+    }
+
+    return 0;
+}
+
+static int soc_hsynth_init(struct snd_soc_pcm_runtime *rtd)
+{
+    struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
+    struct device *dev = rtd->card->dev;
+    unsigned int fmt;
+    int ret;
+
+    dev_dbg(dev, "init\n");
+
+    fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
+    SND_SOC_DAIFMT_CBS_CFS;
+
+    /* set cpu DAI configuration */
+    ret = snd_soc_dai_set_fmt(cpu_dai, fmt);
+    if (ret < 0){
+        return ret;
+    }
+
+    return 0;
+}
+
+static int de1soc_hw_params(struct snd_pcm_substream *substream,
+    struct snd_pcm_hw_params *params)
+{
+    struct snd_soc_pcm_runtime *rtd = substream->private_data;
+    struct snd_soc_dai *codec_dai = rtd->codec_dai;
+    struct device *dev = rtd->card->dev;
+    unsigned int mclk_freq;
+    int ret;
+
+    if ((params_rate(params) % 44100) == 0) {
+        mclk_freq = MCLK_RATE_44K;
+    } else if ((params_rate(params) % 48000) == 0) {
+        mclk_freq = MCLK_RATE_48K;
+    } else
+        return -EINVAL;
+
+    /* set codec mclk configuration */
+    ret = snd_soc_dai_set_sysclk(codec_dai, WM8731_SYSCLK_MCLK,
+        mclk_freq, SND_SOC_CLOCK_OUT);
+    if (ret < 0)
+        return ret;
+
+    dev_dbg(dev, "hw_params: mclk_freq=%d\n", mclk_freq);
+    return 0;
+}
+
+static void de1soc_shutdown(struct snd_pcm_substream *substream)
+{
+    struct snd_soc_pcm_runtime *rtd = substream->private_data;
+    struct snd_soc_dai *codec_dai = rtd->codec_dai;
+    struct device *dev = rtd->card->dev;
+    int ret;
+
+    dev_dbg(dev, "shutdown\n");
+    ret = snd_soc_dai_set_sysclk(codec_dai, WM8731_SYSCLK_MCLK,
+        0, SND_SOC_CLOCK_OUT);
+    if (ret < 0) {
+        dev_err(dev, "Failed to reset WM8731 SYSCLK: %d\n", ret);
+    }
+}
+
+static struct snd_soc_ops de1soc_ops = {
+    // .startup
+    .shutdown = de1soc_shutdown,
+    .hw_params = de1soc_hw_params,
+    // .hw_free
+    // .prepare
+    // .trigger
+};
+
+static const struct snd_soc_dapm_widget de1soc_dapm_widgets[] = {
+    SND_SOC_DAPM_HP("Headphone Jack", NULL),
+    SND_SOC_DAPM_MIC("Microphone Jack", NULL),
+    SND_SOC_DAPM_LINE("Line In Jack", NULL),
+    SND_SOC_DAPM_LINE("Line Out Jack", NULL),
+//    SND_SOC_DAPM_LINE("Hsynth in", NULL),
+};
+
+static const struct snd_soc_dapm_route intercon[] = {
+    {"MICIN", NULL, "Mic Bias"},
+    {"Mic Bias", NULL, "Microphone Jack"},
+    {"LLINEIN", NULL, "Line In Jack"},
+    {"RLINEIN", NULL, "Line In Jack"},
+    {"Line Out Jack", NULL, "LOUT"},
+    {"Line Out Jack", NULL, "ROUT"},
+    {"Headphone Jack", NULL, "LHPOUT"},
+    {"Headphone Jack", NULL, "RHPOUT"},
+//    {"PDM_DAT", NULL, "Hsynth in"},
+};
+
+
+static int de1soc_wm8731_init(struct snd_soc_pcm_runtime *rtd)
+{
+    struct snd_soc_dai *codec_dai = rtd->codec_dai;
+    struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
+    struct device *dev = rtd->card->dev;
+    unsigned int fmt;
+    int ret;
+
+    dev_dbg(dev, "init\n");
+
+    fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
+    SND_SOC_DAIFMT_CBS_CFS;
+
+    ret = snd_soc_dai_set_fmt(cpu_dai, fmt);
+    if (ret < 0)
+        return ret;
+
+    ret = snd_soc_dai_set_fmt(codec_dai, fmt);
+    if (ret < 0)
+        return ret;
+
+    // Don't let codec constraints interfere
+    ret = snd_soc_dai_set_sysclk(codec_dai, WM8731_SYSCLK_MCLK,
+                                 0, SND_SOC_CLOCK_OUT);
+    if (ret < 0) {
+        dev_err(dev, "Failed to set WM8731 SYSCLK: %d\n", ret);
+        return ret;
+    }
+
+    return 0;
+}
+
+#define DE1_SOC_DAI_FMT (SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF | \
+SND_SOC_DAIFMT_CBS_CFS)
+/*
+static struct snd_soc_dai_link de1soc_dai[] = {
+    {
+        .name = "WM8731 Tx",
+        .stream_name = "WM8731 PCM Play",
+        .cpu_dai_name = "ff200000.i2s",
+        .codec_dai_name = "wm8731-hifi",
+        .platform_name = "de1soc",
+        .codec_name = "wm8731.0-001a",
+        .init = de1soc_wm8731_init,
+        .ops = &de1soc_ops,
+        .dai_fmt = DE1_SOC_DAI_FMT,
+    },
+};
+*/
+
+enum {
+    DAI_LINK_PLAYBACK,
+    DAI_LINK_CAPTURE,
+//    DAI_LINK_HSYNTH,
+};
+
+static struct snd_soc_dai_link de1soc_dai[] = {
+    [DAI_LINK_PLAYBACK] = {
+        .name = "WM8731 Tx",
+        .stream_name = "WM8731 PCM Play",
+        .cpu_dai_name = "ff200000.i2s",
+        .codec_dai_name = "wm8731-hifi",
+        .init = de1soc_wm8731_init,
+        .platform_name = "de1soc",
+        .codec_name = "wm8731.0-001a",
+//        .dai_fmt = DE1_SOC_DAI_FMT,
+        .ops = &de1soc_ops,
+        .playback_only	= true,
+    },
+    [DAI_LINK_CAPTURE] = {
+        .name = "WM8731 Rx",
+        .stream_name = "WM8731 PCM Cap",
+        .cpu_dai_name = "ff200000.i2s",
+        .codec_dai_name = "wm8731-hifi",
+        .init = de1soc_wm8731_init,
+        .platform_name = "de1soc",
+        .codec_name = "wm8731.0-001a",
+//        .dai_fmt = DE1_SOC_DAI_FMT,
+        .ops = &de1soc_ops,
+        .capture_only	= true,
+    },/*
+    [DAI_LINK_HSYNTH] = {
+        .name = "HSYNTH",
+        .stream_name = "HSYNTH PCM",
+        .cpu_dai_name = "ff200000.dmalink",
+        .codec_dai_name = "hsynth7002-hifi",
+        .platform_name = "de1soc",
+        .codec_name = "hsynth7002.hsynth",
+        .dai_fmt = DE1_SOC_DAI_FMT,
+        .ops = &de1soc_ops,
+        .capture_only	= true,
+    },*/
+};
+
+static struct snd_soc_card snd_soc_de1soc = {
+    .name = "DE1-HSYNTH-WM8731",
+    .owner = THIS_MODULE,
+    .dai_link = de1soc_dai,
+    .num_links = ARRAY_SIZE(de1soc_dai),
+//    .num_links = 1,
+
+    .probe        = hmidi_card_probe,
+    .remove       = hmidi_card_remove,
+
+    .dapm_widgets = de1soc_dapm_widgets,
+    .num_dapm_widgets = ARRAY_SIZE(de1soc_dapm_widgets),
+    .dapm_routes = intercon,
+    .num_dapm_routes = ARRAY_SIZE(intercon),
+};
+
+static int de1soc_audio_probe(struct platform_device *pdev)
+{
+    struct snd_soc_card *card = &snd_soc_de1soc;
+    int ret, i;
+//    int ret;
+    struct device_node *np = pdev->dev.of_node;
+    struct device_node  *cpu_np[2], *codec_np[2];
+//    struct device_node  *cpu_np[3], *codec_np[3];
+
+    if (!np) {
+        return -ENODEV;
+    }
+
+    /* I2C bus is muxed between HPS and FPGA. Set mux to HPS */
+    i2c_mux_gpio = of_get_named_gpio(np, "i2c-mux-gpio", 0);
+    if (gpio_is_valid(i2c_mux_gpio)) {
+        ret = devm_gpio_request_one(&pdev->dev,
+            i2c_mux_gpio, GPIOF_OUT_INIT_LOW, "I2C_MUX");
+        if (ret) {
+            dev_err(&pdev->dev,
+                "Failed to request GPIO_%d for i2c_mux: %d\n",
+                i2c_mux_gpio, ret);
+            return ret;
+        }
+        gpio_set_value(i2c_mux_gpio, 1);
+    }
+
+    /* Parse codec info */
+//      cpu_np = of_parse_phandle(np, "i2s-controller", 0);
+    cpu_np[0] = of_parse_phandle(np, "i2s-controller", 0);
+    cpu_np[1] = of_parse_phandle(np, "i2s-controller", 1);
+//     cpu_np[2] = of_parse_phandle(np, "dmalink-controller", 2);
+    codec_np[0] = of_parse_phandle(np, "audio-codec", 0);
+    codec_np[1] = of_parse_phandle(np, "audio-codec", 1);
+//     codec_np[2] = of_parse_phandle(np, "audio-codec", 2);
+    //     if (!cpu_np[0] || !cpu_np[1] || !codec_np) {
+    //         dev_err(&pdev->dev, "codec phandle info missing\n");
+    //         return -EINVAL;
+//     }
+//      de1soc_dai[0].codec_name = NULL;
+//      de1soc_dai[0].codec_of_node = codec_np;
+//      de1soc_dai[0].cpu_dai_name = NULL;
+//      de1soc_dai[0].cpu_of_node = cpu_np[0];
+//      de1soc_dai[0].platform_name = NULL;
+//      de1soc_dai[0].platform_of_node = cpu_np[0];
+
+    for (i = 0; i < card->num_links; i++) {
+        de1soc_dai[i].codec_name = NULL;
+        de1soc_dai[i].codec_of_node = codec_np[i];
+        de1soc_dai[i].cpu_dai_name = NULL;
+        de1soc_dai[i].cpu_of_node = cpu_np[i];
+        de1soc_dai[i].platform_name = NULL;
+        de1soc_dai[i].platform_of_node = cpu_np[i];
+        of_node_put(codec_np[i]);
+        of_node_put(cpu_np[i]);
+    }
+
+//    of_node_put(codec_np);
+    //    of_node_put(cpu_np);
+//     of_node_put(cpu_np[0]);
+
+    card->dev = &pdev->dev;
+    platform_set_drvdata(pdev, card);
+
+    ret = devm_snd_soc_register_card(&pdev->dev, card);
+    if (ret) {
+        dev_err(&pdev->dev, "snd_soc_register_card failed (%d)\n",
+                ret);
+    }
+
+    return ret;
+    /*
+   ret = snd_soc_register_card(card);
+   if (ret) {
+       dev_err(&pdev->dev, "snd_soc_register_card() failed (%d)\n", ret);
+       return ret;
+   }
+
+   return 0;
+*/
+}
+
+static int de1soc_audio_remove(struct platform_device *pdev)
+{
+    struct snd_soc_card *card = platform_get_drvdata(pdev);
+
+    if (gpio_is_valid(i2c_mux_gpio))
+        devm_gpio_free(&pdev->dev, i2c_mux_gpio);
+
+    snd_soc_unregister_card(card);
+
+    return 0;
+}
+
+static const struct of_device_id de1soc_wm8731_dt_ids[] = {
+    { .compatible = "opencores,de1soc-wm8731-hsynth-midi", },
+    { }
+};
+
+MODULE_DEVICE_TABLE(of, de1soc_wm8731_dt_ids);
+
+static struct platform_driver de1soc_audio_driver = {
+    .driver = {
+        .name	= "de1soc-hsynth-audio-midi",
+        .owner	= THIS_MODULE,
+        .of_match_table = of_match_ptr(de1soc_wm8731_dt_ids),
+    },
+    .probe	= de1soc_audio_probe,
+    .remove	= de1soc_audio_remove,
+};
+
+module_platform_driver(de1soc_audio_driver);
+
+/* Module information */
+MODULE_AUTHOR("Bjarne Steinsbo <bsteinsbo@gmail.com>");
+MODULE_DESCRIPTION("ALSA SoC DE1-HSYNTH_WM8731");
+MODULE_LICENSE("GPL");
diff --git a/sound/soc/socsynth/de1-soc-wm8731.c b/sound/soc/socsynth/de1-soc-wm8731.c
new file mode 100644
index 0000000..aed67dc
--- /dev/null
+++ b/sound/soc/socsynth/de1-soc-wm8731.c
@@ -0,0 +1,250 @@
+/*
+ * de1-soc-wm8731 -- SoC audio for Terasic DE1-SoC board
+ * Author: B. Steinsbo <bsteinsbo@gmail.com>
+ *
+ * Based on sam9g20_wm8731 by
+ * Sedji Gaouaou <sedji.gaouaou@atmel.com>
+ *
+ * Licensed under the GPL-2.
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/clk.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/gpio.h>
+#include <linux/of_gpio.h>
+
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/soc.h>
+
+#define WM8731_SYSCLK_XTAL 1
+#define WM8731_SYSCLK_MCLK 2
+#define MCLK_RATE_48K 12288000 /* fs*256 */
+#define MCLK_RATE_44K 16934400 /* fs*384 */
+
+static unsigned int i2c_mux_gpio;
+
+static int de1soc_hw_params(struct snd_pcm_substream *substream,
+	struct snd_pcm_hw_params *params)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct snd_soc_dai *codec_dai = rtd->codec_dai;
+	struct device *dev = rtd->card->dev;
+	unsigned int mclk_freq;
+	int ret;
+
+	if ((params_rate(params) % 44100) == 0) {
+		mclk_freq = MCLK_RATE_44K;
+	} else if ((params_rate(params) % 48000) == 0) {
+		mclk_freq = MCLK_RATE_48K;
+	} else
+		return -EINVAL;
+
+	/* set codec mclk configuration */
+	ret = snd_soc_dai_set_sysclk(codec_dai, WM8731_SYSCLK_MCLK,
+		mclk_freq, SND_SOC_CLOCK_OUT);
+	if (ret < 0)
+		return ret;
+
+	dev_dbg(dev, "hw_params: mclk_freq=%d\n", mclk_freq);
+	return 0;
+}
+
+static void de1soc_shutdown(struct snd_pcm_substream *substream)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct snd_soc_dai *codec_dai = rtd->codec_dai;
+	struct device *dev = rtd->card->dev;
+	int ret;
+
+	dev_dbg(dev, "shutdown\n");
+	ret = snd_soc_dai_set_sysclk(codec_dai, WM8731_SYSCLK_MCLK,
+		0, SND_SOC_CLOCK_OUT);
+	if (ret < 0) {
+		dev_err(dev, "Failed to reset WM8731 SYSCLK: %d\n", ret);
+	}
+}
+
+static struct snd_soc_ops de1soc_ops = {
+	// .startup
+	.shutdown = de1soc_shutdown,
+	.hw_params = de1soc_hw_params,
+	// .hw_free
+	// .prepare
+	// .trigger
+};
+
+static const struct snd_soc_dapm_widget de1soc_dapm_widgets[] = {
+	SND_SOC_DAPM_HP("Headphone Jack", NULL),
+	SND_SOC_DAPM_MIC("Microphone Jack", NULL),
+	SND_SOC_DAPM_LINE("Line In Jack", NULL),
+	SND_SOC_DAPM_LINE("Synth In Jack", NULL),
+	SND_SOC_DAPM_LINE("Line Out Jack", NULL),
+};
+
+static const struct snd_soc_dapm_route intercon[] = {
+	{"MICIN", NULL, "Mic Bias"},
+	{"Mic Bias", NULL, "Microphone Jack"},
+	{"LLINEIN", NULL, "Line In Jack"},
+	{"RLINEIN", NULL, "Line In Jack"},
+	{"LSYNTH", NULL, "Synth In Jack"},
+	{"RSYNTH", NULL, "Synth In Jack"},
+	{"Line Out Jack", NULL, "LOUT"},
+	{"Line Out Jack", NULL, "ROUT"},
+	{"Headphone Jack", NULL, "LHPOUT"},
+	{"Headphone Jack", NULL, "RHPOUT"},
+};
+
+static int de1soc_wm8731_init(struct snd_soc_pcm_runtime *rtd)
+{
+	struct snd_soc_dai *codec_dai = rtd->codec_dai;
+	struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
+	struct device *dev = rtd->card->dev;
+	unsigned int fmt;
+	int ret;
+
+	dev_dbg(dev, "init\n");
+
+	fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
+	      SND_SOC_DAIFMT_CBS_CFS;
+
+	/* set cpu DAI configuration */
+	ret = snd_soc_dai_set_fmt(cpu_dai, fmt);
+	if (ret < 0)
+		return ret;
+
+	/* set codec DAI configuration */
+	ret = snd_soc_dai_set_fmt(codec_dai, fmt);
+	if (ret < 0)
+		return ret;
+
+	/* Don't let codec constraints interfere */
+	ret = snd_soc_dai_set_sysclk(codec_dai, WM8731_SYSCLK_MCLK,
+		0, SND_SOC_CLOCK_OUT);
+	if (ret < 0) {
+		dev_err(dev, "Failed to set WM8731 SYSCLK: %d\n", ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+static struct snd_soc_dai_link de1soc_dai = {
+	.name = "WM8731",
+	.stream_name = "WM8731 PCM",
+	.cpu_dai_name = "ff200000.i2s",
+	.codec_dai_name = "wm8731-hifi",
+	.init = de1soc_wm8731_init,
+	.platform_name = "de1soc",
+	.codec_name = "wm8731.0-001a",
+	.ops = &de1soc_ops,
+};
+
+static struct snd_soc_card snd_soc_de1soc = {
+	.name = "DE1SOC-WM8731",
+	.owner = THIS_MODULE,
+	.dai_link = &de1soc_dai,
+	.num_links = 1,
+
+	.dapm_widgets = de1soc_dapm_widgets,
+	.num_dapm_widgets = ARRAY_SIZE(de1soc_dapm_widgets),
+	.dapm_routes = intercon,
+	.num_dapm_routes = ARRAY_SIZE(intercon),
+};
+
+static int de1soc_audio_probe(struct platform_device *pdev)
+{
+	struct device_node *np = pdev->dev.of_node;
+	struct device_node *codec_np, *cpu_np;
+	struct snd_soc_card *card = &snd_soc_de1soc;
+	int ret;
+
+	if (!np) {
+		return -ENODEV;
+	}
+
+	card->dev = &pdev->dev;
+
+	/* I2C bus is muxed between HPS and FPGA. Set mux to HPS */
+	i2c_mux_gpio = of_get_named_gpio(np, "i2c-mux-gpio", 0);
+	if (gpio_is_valid(i2c_mux_gpio)) {
+		ret = devm_gpio_request_one(&pdev->dev,
+			i2c_mux_gpio, GPIOF_OUT_INIT_LOW, "I2C_MUX");
+		if (ret) {
+			dev_err(&pdev->dev,
+				"Failed to request GPIO_%d for i2c_mux: %d\n",
+				i2c_mux_gpio, ret);
+			return ret;
+		}
+		gpio_set_value(i2c_mux_gpio, 1);
+	}
+
+	/* Parse codec info */
+	de1soc_dai.codec_name = NULL;
+	codec_np = of_parse_phandle(np, "audio-codec", 0);
+	if (!codec_np) {
+		dev_err(&pdev->dev, "codec info missing\n");
+		return -EINVAL;
+	}
+	de1soc_dai.codec_of_node = codec_np;
+
+	/* Parse dai and platform info */
+	de1soc_dai.cpu_dai_name = NULL;
+	de1soc_dai.platform_name = NULL;
+	cpu_np = of_parse_phandle(np, "i2s-controller", 0);
+	if (!cpu_np) {
+		dev_err(&pdev->dev, "dai and pcm info missing\n");
+		return -EINVAL;
+	}
+	de1soc_dai.cpu_of_node = cpu_np;
+	de1soc_dai.platform_of_node = cpu_np;
+
+	of_node_put(codec_np);
+	of_node_put(cpu_np);
+
+	ret = snd_soc_register_card(card);
+	if (ret) {
+		dev_err(&pdev->dev, "snd_soc_register_card() failed\n");
+	}
+
+	return ret;
+}
+
+static int de1soc_audio_remove(struct platform_device *pdev)
+{
+	struct snd_soc_card *card = platform_get_drvdata(pdev);
+
+	if (gpio_is_valid(i2c_mux_gpio))
+		devm_gpio_free(&pdev->dev, i2c_mux_gpio);
+
+	snd_soc_unregister_card(card);
+
+	return 0;
+}
+
+static const struct of_device_id de1soc_wm8731_dt_ids[] = {
+	{ .compatible = "opencores,de1soc-wm8731-audio", },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, de1soc_wm8731_dt_ids);
+
+static struct platform_driver de1soc_audio_driver = {
+	.driver = {
+		.name	= "de1soc-audio",
+		.owner	= THIS_MODULE,
+		.of_match_table = of_match_ptr(de1soc_wm8731_dt_ids),
+	},
+	.probe	= de1soc_audio_probe,
+	.remove	= de1soc_audio_remove,
+};
+
+module_platform_driver(de1soc_audio_driver);
+
+/* Module information */
+MODULE_AUTHOR("Bjarne Steinsbo <bsteinsbo@gmail.com>");
+MODULE_DESCRIPTION("ALSA SoC DE1-SoC_WM8731");
+MODULE_LICENSE("GPL");
diff --git a/sound/soc/socsynth/opencores_i2s.c b/sound/soc/socsynth/opencores_i2s.c
new file mode 100644
index 0000000..8396c09e
--- /dev/null
+++ b/sound/soc/socsynth/opencores_i2s.c
@@ -0,0 +1,447 @@
+/*
+* Copyright (C) 2014 Bjarne Steinsbo <bsteinsbo@gmail.com>
+* Largely based on axi-i2s.c by Lars-Peter Clausen.
+*
+* Licensed under the GPL-2.
+*/
+
+#include <linux/clk.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/platform_device.h>
+#include <linux/regmap.h>
+#include <linux/slab.h>
+
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/soc.h>
+#include <sound/dmaengine_pcm.h>
+
+#define DAC_FIFO_ADDR	0x00
+#define STATUS_ADDR	0x04
+#define CMD_ADDR	0x08
+#define ADC_FIFO_ADDR	0x00
+#define HS_FIFO_ADDR	0x0A
+#define HS_STATUS_ADDR	0x10
+#define HS_CMD_ADDR	0x14
+
+/* Commands to register at CMD_ADDR */
+#define PB_FIFO_CLEAR	BIT(0)
+#define PB_ENABLE	BIT(1)
+#define CAP_FIFO_CLEAR	BIT(2)
+#define CAP_ENABLE	BIT(3)
+
+#define CLK_CTRL1	0x00
+#define CLK_CTRL2	0x04
+
+/* Bit-fields of clk control register 1 */
+#define CLK_MASTER_SLAVE  BIT(0)
+#define CLK_SEL_48_44	  BIT(1)
+#define MCLK_DIV_SHIFT	  (24)
+#define MCLK_DIV_MASK	  GENMASK(MCLK_DIV_SHIFT + 7, MCLK_DIV_SHIFT)
+#define BCLK_DIV_SHIFT	  (16)
+#define BCLK_DIV_MASK	  GENMASK(BCLK_DIV_SHIFT + 7, BCLK_DIV_SHIFT)
+/* Bit-fields of clk control register 2 */
+#define PB_LRC_DIV_SHIFT  (8)
+#define PB_LRC_DIV_MASK	  GENMASK(PB_LRC_DIV_SHIFT + 7, PB_LRC_DIV_SHIFT)
+#define CAP_LRC_DIV_SHIFT (0)
+#define CAP_LRC_DIV_MASK  GENMASK(CAP_LRC_DIV_SHIFT + 7, CAP_LRC_DIV_SHIFT)
+
+/* The frame size is not configurable */
+#define BITS_PER_FRAME 64
+
+struct opencores_i2s {
+    struct regmap *regmap_data;
+    struct regmap *regmap_clk;
+    struct clk *clk48;
+    struct clk *clk44;
+
+    struct snd_soc_dai_driver dai_driver;
+
+    struct snd_dmaengine_dai_dma_data capture_dma_data;
+    struct snd_dmaengine_dai_dma_data hsynth_dma_data;
+    struct snd_dmaengine_dai_dma_data playback_dma_data;
+
+    struct snd_ratnum ratnum;
+    struct snd_pcm_hw_constraint_ratnums rate_constraints;
+};
+
+static int opencores_i2s_trigger(struct snd_pcm_substream *substream, int cmd,
+    struct snd_soc_dai *dai)
+{
+    struct opencores_i2s *i2s = snd_soc_dai_get_drvdata(dai);
+    unsigned int mask, val;
+
+    if (substream->stream == SNDRV_PCM_STREAM_CAPTURE)
+        mask = CAP_ENABLE;
+    else
+        mask = PB_ENABLE;
+
+    switch (cmd) {
+    case SNDRV_PCM_TRIGGER_START:
+    case SNDRV_PCM_TRIGGER_RESUME:
+    case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
+        val = mask;
+        break;
+    case SNDRV_PCM_TRIGGER_STOP:
+    case SNDRV_PCM_TRIGGER_SUSPEND:
+    case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
+        val = 0;
+        break;
+    default:
+        return -EINVAL;
+    }
+
+    regmap_update_bits(i2s->regmap_data, CMD_ADDR, mask, val);
+    regmap_update_bits(i2s->regmap_data, HS_CMD_ADDR, mask, val);
+//	regmap_write(i2s->regmap_data, CMD_ADDR, val);
+
+    dev_dbg(dai->dev, "trigger %x\n", val);
+    return 0;
+}
+
+static int divisor_value(unsigned long xtal_rate, unsigned long rate, int shift)
+{
+    return ((xtal_rate / rate / 2) >> shift) - 1;
+}
+
+static int opencores_i2s_hw_params(struct snd_pcm_substream *substream,
+    struct snd_pcm_hw_params *params, struct snd_soc_dai *dai)
+{
+    struct opencores_i2s *i2s = snd_soc_dai_get_drvdata(dai);
+    unsigned long xtal_rate;
+    int lrclk_div;
+    int mclk_div;
+    int bclk_div;
+    int mask, val;
+    int mask2, val2;
+
+    dev_dbg(dai->dev, "hw_params fmt=0x%x\n", params_format(params));
+    dev_dbg(dai->dev, "hw_params rate=%d\n", params_rate(params));
+    if (params_format(params) != SNDRV_PCM_FORMAT_S32_LE)
+        return -EINVAL;
+
+    if ((params_rate(params) % 44100) == 0) {
+        val = CLK_SEL_48_44;
+        xtal_rate = clk_get_rate(i2s->clk44);
+        mclk_div = divisor_value(xtal_rate, 16934400, 0); /* fs*384 at 44.1kHz */
+    } else if ((params_rate(params) % 48000) == 0) {
+        val = 0;
+        xtal_rate = clk_get_rate(i2s->clk48);
+        mclk_div = divisor_value(xtal_rate, 12288000, 0); /* fs*256 at 48kHz */
+    } else
+        return -EINVAL;
+    mask = CLK_SEL_48_44;
+    mask2 = 0;
+
+    lrclk_div = divisor_value(xtal_rate, params_rate(params), 4);
+    bclk_div = divisor_value(xtal_rate, params_rate(params) * BITS_PER_FRAME, 0);
+    dev_dbg(dai->dev, "hw_params mclk_div=%d\n", mclk_div);
+    dev_dbg(dai->dev, "hw_params lrclk_div=%d\n", lrclk_div);
+    dev_dbg(dai->dev, "hw_params bclk_div=%d\n", bclk_div);
+    val |= mclk_div << MCLK_DIV_SHIFT;
+    mask |= MCLK_DIV_MASK;
+    val |= bclk_div << BCLK_DIV_SHIFT;
+    mask |= BCLK_DIV_MASK;
+    regmap_update_bits(i2s->regmap_clk, CLK_CTRL1, mask, val);
+    dev_dbg(dai->dev, "hw_params mask=0x%x val=0x%x\n", mask, val);
+    if (substream->stream == SNDRV_PCM_STREAM_CAPTURE) {
+        val2 = lrclk_div << CAP_LRC_DIV_SHIFT;
+        mask2 = CAP_LRC_DIV_MASK;
+    } else {
+        val2 = lrclk_div << PB_LRC_DIV_SHIFT;
+        mask2 = PB_LRC_DIV_MASK;
+    }
+    regmap_update_bits(i2s->regmap_clk, CLK_CTRL2, mask2, val2);
+    dev_dbg(dai->dev, "hw_params mask2=0x%x val2=0x%x\n", mask2, val2);
+    return 0;
+}
+
+static int opencores_i2s_set_fmt(struct snd_soc_dai *dai, unsigned int fmt)
+{
+    struct opencores_i2s *i2s = snd_soc_dai_get_drvdata(dai);
+    int val = 0;
+    dev_dbg(dai->dev, "set_fmt 0x%x\n", fmt);
+
+    if ((fmt & SND_SOC_DAIFMT_FORMAT_MASK) != SND_SOC_DAIFMT_I2S)
+        return -EINVAL;
+
+    if ((fmt & SND_SOC_DAIFMT_INV_MASK) != SND_SOC_DAIFMT_NB_NF)
+        return -EINVAL;
+
+    switch (fmt & SND_SOC_DAIFMT_MASTER_MASK) {
+    case SND_SOC_DAIFMT_CBM_CFM:
+        val = 0;
+        break;
+    case SND_SOC_DAIFMT_CBS_CFS:
+        val = 1;
+        break;
+    default:
+        return -EINVAL;
+    }
+
+    dev_dbg(dai->dev, "set_fmt master=%d\n", val);
+    regmap_update_bits(i2s->regmap_clk, 0, CLK_MASTER_SLAVE, val);
+    return 0;
+}
+
+static int opencores_i2s_sysclk(struct snd_soc_dai *dai, int clk_id,
+    unsigned int freq, int dir)
+{
+    struct opencores_i2s *i2s = snd_soc_dai_get_drvdata(dai);
+    int val = SND_SOC_CLOCK_IN ? 1 : 0;
+    dev_dbg(dai->dev, "sysclk id=%d freq=%d dir=%d\n", clk_id, freq, dir);
+    regmap_update_bits(i2s->regmap_clk, 0, CLK_MASTER_SLAVE, val);
+    return 0;
+}
+
+static void opencores_i2s_shutdown(struct snd_pcm_substream *substream,
+    struct snd_soc_dai *dai)
+{
+    struct opencores_i2s *i2s = snd_soc_dai_get_drvdata(dai);
+    int mask;
+    int val;
+    dev_dbg(dai->dev, "shutdown\n");
+
+    if (substream->stream == SNDRV_PCM_STREAM_CAPTURE)
+        mask = CAP_ENABLE | CAP_FIFO_CLEAR;
+    else
+        mask = PB_ENABLE | PB_FIFO_CLEAR;
+    val = PB_FIFO_CLEAR | CAP_FIFO_CLEAR;
+    regmap_update_bits(i2s->regmap_data, CMD_ADDR, mask, val);
+    regmap_update_bits(i2s->regmap_data, HS_CMD_ADDR, mask, val);
+}
+
+static int opencores_i2s_dai_probe(struct snd_soc_dai *dai)
+{
+    struct opencores_i2s *i2s = snd_soc_dai_get_drvdata(dai);
+
+    dev_dbg(dai->dev, "dai_probe\n");
+    snd_soc_dai_init_dma_data(dai, &i2s->playback_dma_data,
+        &i2s->capture_dma_data);
+
+    return 0;
+}
+
+static const struct snd_soc_dai_ops opencores_i2s_dai_ops = {
+    .set_sysclk = opencores_i2s_sysclk,
+    // .set_pll
+    //.set_clkdiv = opencores_i2s_set_clkdiv,
+    // .set_bclk_ratio
+        .set_fmt = opencores_i2s_set_fmt,
+        // .xlate_tdm_slot_mask
+        // .set_tdm_slot
+        // .set_channel_map
+        // .set_tristate
+
+        // .digital_mute
+        // .mute_stream
+
+    //.startup = opencores_i2s_startup,
+    .shutdown = opencores_i2s_shutdown,
+    .hw_params = opencores_i2s_hw_params,
+    // .hw_free
+    // .prepare
+    .trigger = opencores_i2s_trigger,
+    // .bespoke_trigger
+    // .delay
+};
+
+static struct snd_soc_dai_driver opencores_i2s_dai = {
+    .probe = opencores_i2s_dai_probe,
+    .playback = {
+        .channels_min = 2,
+        .channels_max = 2,
+        .rates = SNDRV_PCM_RATE_44100 | SNDRV_PCM_RATE_48000
+            | SNDRV_PCM_RATE_88200 | SNDRV_PCM_RATE_96000
+            | SNDRV_PCM_RATE_176400 | SNDRV_PCM_RATE_192000,
+        .formats = SNDRV_PCM_FMTBIT_S32_LE,
+    },
+    .capture = {
+        .channels_min = 4,
+        .channels_max = 4,
+        .rates = SNDRV_PCM_RATE_44100 | SNDRV_PCM_RATE_48000
+            | SNDRV_PCM_RATE_88200 | SNDRV_PCM_RATE_96000
+            | SNDRV_PCM_RATE_176400 | SNDRV_PCM_RATE_192000,
+        .formats = SNDRV_PCM_FMTBIT_S32_LE,
+    },
+    .ops = &opencores_i2s_dai_ops,
+    .symmetric_rates = 1,
+};
+
+static const struct snd_soc_component_driver opencores_i2s_component = {
+    .name = "opencores-i2s",
+};
+
+static const struct regmap_config opencores_i2s_regmap_data_config = {
+    .name = "opencores_i2s.data",
+    .reg_bits = 32,
+    .reg_stride = 4,
+    .val_bits = 32,
+    .max_register = HS_CMD_ADDR,
+};
+
+static const struct regmap_config opencores_i2s_regmap_clk_config = {
+    .name = "opencores_i2s.clk",
+    .reg_bits = 32,
+    .reg_stride = 4,
+    .val_bits = 32,
+    .max_register = CLK_CTRL2,
+};
+
+static int opencores_i2s_probe(struct platform_device *pdev)
+{
+    struct resource *res, *res_clk;
+    struct opencores_i2s *i2s;
+    void __iomem *base;
+    int signature;
+    int ret;
+
+    i2s = devm_kzalloc(&pdev->dev, sizeof(*i2s), GFP_KERNEL);
+    if (!i2s) {
+        dev_err(&pdev->dev, "Can't allocate opencores_i2s\n");
+        return -ENOMEM;
+    }
+    platform_set_drvdata(pdev, i2s);
+
+    res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+    if (!res) {
+        dev_err(&pdev->dev, "No memory resource\n");
+        return -ENODEV;
+    }
+    base = devm_ioremap_resource(&pdev->dev, res);
+    if (IS_ERR(base)) {
+        dev_err(&pdev->dev, "No ioremap resource\n");
+        return PTR_ERR(base);
+    }
+    printk(KERN_ALERT "opencores_i2s at %08x\n", (int)base);
+
+    i2s->regmap_data = devm_regmap_init_mmio(&pdev->dev, base,
+        &opencores_i2s_regmap_data_config);
+    if (IS_ERR(i2s->regmap_data)) {
+        dev_err(&pdev->dev, "No regmap_data\n");
+        return PTR_ERR(i2s->regmap_data);
+    }
+
+    res_clk = platform_get_resource(pdev, IORESOURCE_MEM, 1);
+    if (!res_clk) {
+        dev_err(&pdev->dev, "No memory resource\n");
+        return -ENODEV;
+    }
+    base = devm_ioremap_resource(&pdev->dev, res_clk);
+    if (IS_ERR(base)) {
+        dev_err(&pdev->dev, "No ioremap resource\n");
+        return PTR_ERR(base);
+    }
+
+    i2s->regmap_clk = devm_regmap_init_mmio(&pdev->dev, base,
+        &opencores_i2s_regmap_clk_config);
+    if (IS_ERR(i2s->regmap_clk)) {
+        dev_err(&pdev->dev, "No regmap_clk\n");
+        return PTR_ERR(i2s->regmap_clk);
+    }
+
+    i2s->clk48 = devm_clk_get(&pdev->dev, "clk48");
+    if (IS_ERR(i2s->clk48)) {
+        dev_err(&pdev->dev, "No clk48 clock\n");
+        return PTR_ERR(i2s->clk48);
+    }
+
+    ret = clk_prepare_enable(i2s->clk48);
+    if (ret) {
+        dev_err(&pdev->dev, "Cannot enable clock\n");
+        return ret;
+    }
+
+    i2s->clk44 = devm_clk_get(&pdev->dev, "clk44");
+    if (IS_ERR(i2s->clk44)) {
+        dev_err(&pdev->dev, "No clk44 clock\n");
+        return PTR_ERR(i2s->clk44);
+    }
+
+    ret = clk_prepare_enable(i2s->clk44);
+    if (ret) {
+        dev_err(&pdev->dev, "Cannot enable clock\n");
+        return ret;
+    }
+
+    i2s->playback_dma_data.addr = res->start + DAC_FIFO_ADDR;
+    i2s->playback_dma_data.addr_width = 4;
+    i2s->playback_dma_data.maxburst = 1;
+    //i2s->playback_dma_data.maxburst = 2;
+    dev_dbg(&pdev->dev, "probe playback dma addr : %8x\n",
+        i2s->playback_dma_data.addr);
+
+    i2s->capture_dma_data.addr = res->start + ADC_FIFO_ADDR;
+    i2s->capture_dma_data.addr_width = 4;
+    i2s->capture_dma_data.maxburst = 1;
+
+    i2s->hsynth_dma_data.addr = res->start + HS_FIFO_ADDR;
+    i2s->hsynth_dma_data.addr_width = 4;
+    i2s->hsynth_dma_data.maxburst = 1;
+    //i2s->capture_dma_data.maxburst = 2;
+
+/*
+    i2s->ratnum.num = clk_get_rate(i2s->clk_ref) / 2 / BITS_PER_FRAME;
+    i2s->ratnum.den_step = 1;
+    i2s->ratnum.den_min = 1;
+    i2s->ratnum.den_max = 64;
+
+    i2s->rate_constraints.rats = &i2s->ratnum;
+    i2s->rate_constraints.nrats = 1;
+*/
+
+    regmap_write(i2s->regmap_data, CMD_ADDR, PB_FIFO_CLEAR | CAP_FIFO_CLEAR);
+    regmap_write(i2s->regmap_data, HS_CMD_ADDR, PB_FIFO_CLEAR | CAP_FIFO_CLEAR);
+    ret = regmap_read(i2s->regmap_data, STATUS_ADDR, &signature);
+    if (ret) {
+        dev_err(&pdev->dev, "Cannot read signature\n");
+        printk(KERN_ALERT "opencores_i2s probe signature : %4x\n", signature);
+        goto err_clk_disable;
+    }
+    dev_dbg(&pdev->dev, "probe signature : %4x\n", signature);
+
+    ret = devm_snd_soc_register_component(&pdev->dev, &opencores_i2s_component,
+                    &opencores_i2s_dai, 1);
+    if (ret) {
+        dev_err(&pdev->dev, "Cannot register component\n");
+        goto err_clk_disable;
+    }
+
+    ret = devm_snd_dmaengine_pcm_register(&pdev->dev, NULL, 0);
+    if (ret) {
+        dev_err(&pdev->dev, "Cannot register dmaengine\n");
+        goto err_clk_disable;
+    }
+
+    dev_dbg(&pdev->dev, "probe finishing\n");
+    return ret;
+
+err_clk_disable:
+    clk_disable_unprepare(i2s->clk48);
+    clk_disable_unprepare(i2s->clk44);
+    return ret;
+}
+
+static const struct of_device_id opencores_i2s_of_match[] = {
+    { .compatible = "opencores,i2s", },
+    {},
+};
+MODULE_DEVICE_TABLE(of, opencores_i2s_of_match);
+
+static struct platform_driver opencores_i2s_driver = {
+    .driver = {
+        .name = "opencores-i2s",
+        .owner = THIS_MODULE,
+        .of_match_table = opencores_i2s_of_match,
+    },
+    .probe = opencores_i2s_probe,
+};
+module_platform_driver(opencores_i2s_driver);
+
+MODULE_AUTHOR("Bjarne Steinsbo <bsteinsbo@gmail.com>");
+MODULE_DESCRIPTION("I2S driver for core at https://github.com/bsteinsbo/i2s.git");
+MODULE_LICENSE("GPL");
diff --git a/sound/soc/socsynth/socmidi.c b/sound/soc/socsynth/socmidi.c
new file mode 100644
index 0000000..5bc71af
--- /dev/null
+++ b/sound/soc/socsynth/socmidi.c
@@ -0,0 +1,292 @@
+/*
+ * hsynth-soc -- SoC audio ( midi for Altera SoC boards
+ * Author: Michael Brown the-snowwhite <producer@holotronic.dk>
+ *
+ * Based on de1-soc-wm8731 by
+ *  B. Steinsbo <bsteinsbo@gmail.com>
+ *
+ * Licensed under the GPL-2.
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/clk.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/uaccess.h>
+#include <linux/ioport.h>
+#include <linux/io.h>
+
+#include <sound/core.h>
+#include <sound/seq_kernel.h>
+#include <sound/rawmidi.h>
+#include <sound/initval.h>
+// #include <sound/pcm.h>
+// #include <sound/pcm_params.h>
+#include <sound/soc.h>
+
+#define SOCSYNTHMIDI_LOG_PREFIX "socsynthmidi: "
+
+//#define HSYNTH_SYSCLK_MCLK 2
+//#define MCLK_RATE_48K 12288000 /* fs*256 */
+//#define MCLK_RATE_44K 16934400 /* fs*384 */
+#define midi_ins 0
+#define midi_outs 1
+
+#define MIDIREG_BASE 0xff200000
+#define MIDIREG_SIZE PAGE_SIZE
+#define MIDIREG_OFFSET 0x50000
+
+#define printe(...) pr_err(SOCSYNTHMIDI_LOG_PREFIX __VA_ARGS__)
+
+static int snd_socmidi_open(struct snd_rawmidi_substream *substream);
+static int snd_socmidi_close(struct snd_rawmidi_substream *substream);
+static int hmidi_card_probe(struct snd_soc_card *card);
+static int hmidi_card_remove(struct snd_soc_card *card);
+static void snd_socmidi_transmit(unsigned char data);
+static void snd_socmidi_output_trigger(struct snd_rawmidi_substream *substream, int);
+static int hsound_midi_init(struct snd_card *card);
+
+void *midireg_mem;
+
+static int snd_socmidi_open(struct snd_rawmidi_substream *substream)
+{
+    return 0;
+}
+
+static int snd_socmidi_close(struct snd_rawmidi_substream *substream)
+{
+    return 0;
+}
+
+static int hmidi_card_probe(struct snd_soc_card *card)
+{
+    int err;
+
+    err = hsound_midi_init(card->snd_card);
+
+    if (err < 0) {
+        //		dev_dbg(&pdev->dev,"hsound_midi_init failed: %d\n", err);
+        return err;
+    }
+
+    return 0;
+}
+
+static int hmidi_card_remove(struct snd_soc_card *card)
+{
+    return 0;
+}
+
+static void snd_socmidi_transmit(unsigned char data){
+
+    iowrite8(data, midireg_mem);
+
+}
+
+static void snd_socmidi_output_trigger(struct snd_rawmidi_substream *substream, int up) {
+
+    if (!up)
+        return;
+
+    while (1) {
+        unsigned char data;
+        if (snd_rawmidi_transmit(substream, &data, 1) != 1)
+            break; /* no more data */
+            snd_socmidi_transmit(data);
+    }
+}
+
+static struct snd_rawmidi *g_rmidi;
+
+static struct snd_rawmidi_ops snd_socmidi_output_ops = {
+    .open = snd_socmidi_open,
+    .close = snd_socmidi_close,
+    .trigger = snd_socmidi_output_trigger,
+};
+
+static void pisnd_get_port_info(struct snd_rawmidi *rmidi, int number, struct snd_seq_port_info *seq_port_info)
+{
+    seq_port_info->type =
+    SNDRV_SEQ_PORT_TYPE_MIDI_GENERIC |
+    SNDRV_SEQ_PORT_TYPE_HARDWARE |
+    SNDRV_SEQ_PORT_TYPE_PORT;
+    seq_port_info->midi_voices = 0;
+}
+
+static struct snd_rawmidi_global_ops hsnd_global_ops = {.get_port_info = pisnd_get_port_info, };
+
+static int hsound_midi_init(struct snd_card *card)
+{
+    int err;
+    struct resource *res;
+
+    err = snd_rawmidi_new(card, "SocMIDI", 0, midi_outs, midi_ins, &g_rmidi);
+
+    if (err < 0) {
+        printe("snd_rawmidi_new failed: %d\n", err);
+        return err;
+    }
+
+    strcpy(g_rmidi->name, "Holosynth MIDI ");
+
+    g_rmidi->info_flags = SNDRV_RAWMIDI_INFO_OUTPUT;
+    // rmidi->info_flags = SNDRV_RAWMIDI_INFO_OUTPUT |
+    //                     SNDRV_RAWMIDI_INFO_INPUT |
+    //                     SNDRV_RAWMIDI_INFO_DUPLEX;
+
+    g_rmidi->ops = &hsnd_global_ops;
+
+    g_rmidi->private_data = (void *)0;
+
+    snd_rawmidi_set_ops(g_rmidi, SNDRV_RAWMIDI_STREAM_OUTPUT, &snd_socmidi_output_ops);
+    //    snd_rawmidi_set_ops(rmidi, SNDRV_RAWMIDI_STREAM_INPUT, &snd_socmidi_input_ops);
+
+    res = request_mem_region((MIDIREG_BASE + MIDIREG_OFFSET), MIDIREG_SIZE, "MIDIREG");
+    if (res == NULL) {
+        return -EBUSY;
+    }
+
+    midireg_mem = ioremap((MIDIREG_BASE + MIDIREG_OFFSET), MIDIREG_SIZE);
+    if (midireg_mem == NULL) {
+        release_mem_region(MIDIREG_BASE, MIDIREG_SIZE);
+        return -EFAULT;
+    }
+
+    return 0;
+}
+
+static const struct snd_soc_dapm_widget soc_dapm_widgets[] = {
+    SND_SOC_DAPM_LINE("Hsynth in", NULL),
+};
+
+static const struct snd_soc_dapm_route intercon[] = {
+    {"PDM_DAT", NULL, "Hsynth in"},
+};
+
+// static int soc_hsynth_init(struct snd_soc_pcm_runtime *rtd)
+// {
+//     struct snd_soc_dai *codec_dai = rtd->codec_dai;
+//     struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
+//     struct device *dev = rtd->card->dev;
+//     unsigned int fmt;
+//     int ret;
+//
+//     dev_dbg(dev, "init\n");
+//
+//     fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
+//     SND_SOC_DAIFMT_CBS_CFS;
+//
+//     /* set cpu DAI configuration */
+//     ret = snd_soc_dai_set_fmt(cpu_dai, fmt);
+//     if (ret < 0)
+//         return ret;
+//
+//     /* set codec DAI configuration */
+//     ret = snd_soc_dai_set_fmt(codec_dai, fmt);
+//     if (ret < 0)
+//         return ret;
+//
+//     return 0;
+// }
+
+// static struct snd_soc_dai_link hsynth_soc_dai = {
+//     .name = "HSYNTH",
+//     .stream_name = "HSYNTH PCM",
+//     .cpu_dai_name = "ff200000.dmalink",
+//     .codec_dai_name = "hsynth7002-hifi",
+//     .init = soc_hsynth_init,
+//     .platform_name = "socsynth",
+//     .codec_name = "hsynth7002.hsynth",
+// };
+
+static struct snd_soc_card snd_soc_hsynth_soc = {
+    .name = "HSYNTHVMIDI",
+    .owner = THIS_MODULE,
+//    .dai_link = &hsynth_soc_dai,
+//    .num_links = 1,
+
+    .probe        = hmidi_card_probe,
+    .remove       = hmidi_card_remove,
+
+//    .dapm_widgets = soc_dapm_widgets,
+//    .num_dapm_widgets = ARRAY_SIZE(soc_dapm_widgets),
+//   .dapm_routes = intercon,
+//    .num_dapm_routes = ARRAY_SIZE(intercon),
+};
+
+static int hsynth_soc_midi_probe(struct platform_device *pdev)
+{
+    struct device_node *np = pdev->dev.of_node;
+    struct device_node *codec_np, *cpu_np;
+    struct snd_soc_card *card = &snd_soc_hsynth_soc;
+    int ret;
+
+    if (!np) {
+        return -ENODEV;
+    }
+
+    card->dev = &pdev->dev;
+
+    /* Parse codec info */
+//     hsynth_soc_dai.codec_name = NULL;
+//     codec_np = of_parse_phandle(np, "audio-codec", 0);
+//     if (!codec_np) {
+//         dev_err(&pdev->dev, "codec info missing\n");
+//         return -EINVAL;
+//     }
+//     hsynth_soc_dai.codec_of_node = codec_np;
+
+    /* Parse dai and platform info */
+    hsynth_soc_dai.cpu_dai_name = NULL;
+    hsynth_soc_dai.platform_name = NULL;
+//     cpu_np = of_parse_phandle(np, "dmalink-controller", 0);
+//     if (!cpu_np) {
+//         dev_err(&pdev->dev, "dai and pcm info missing\n");
+//         return -EINVAL;
+//     }
+//     hsynth_soc_dai.cpu_of_node = cpu_np;
+//     hsynth_soc_dai.platform_of_node = cpu_np;
+//
+//     of_node_put(codec_np);
+//     of_node_put(cpu_np);
+
+    ret = snd_soc_register_card(card);
+    if (ret) {
+        dev_err(&pdev->dev, "snd_soc_register_card() failed\n");
+    }
+
+    return ret;
+}
+
+static int soc_midi_remove(struct platform_device *pdev)
+{
+    struct snd_soc_card *card = platform_get_drvdata(pdev);
+
+    snd_soc_unregister_card(card);
+
+    return 0;
+}
+
+static const struct of_device_id soc_hsynth_dt_ids[] = {
+    { .compatible = "holotr,socsynth-midi", },
+    { }
+};
+MODULE_DEVICE_TABLE(of, soc_hsynth_dt_ids);
+
+static struct platform_driver soc_midi_driver = {
+    .driver = {
+        .name	= "soc-synth-midi",
+        .owner	= THIS_MODULE,
+        .of_match_table = of_match_ptr(soc_hsynth_dt_ids),
+    },
+    .probe	= hsynth_soc_midi_probe,
+    .remove	= soc_midi_remove,
+};
+
+module_platform_driver(soc_midi_driver);
+
+/* Module information */
+MODULE_AUTHOR("Michael Brown (the-snowwhite) <producer@holotronic.dk>");
+MODULE_DESCRIPTION("ALSA SoC HSYNTHVMIDI");
+MODULE_LICENSE("GPL");
-- 
2.7.4

