From 692bbec0e969c169f267f76c1368e33b6ca2e816 Mon Sep 17 00:00:00 2001
From: Michael Brown <producer@holotronic.dk>
Date: Thu, 17 May 2018 10:58:21 +0200
Subject: [PATCH 18/18] Add Hsynth midi/audio driver with Phat(pcm5102) audio
 output

Signed-off-by: Michael Brown <producer@holotronic.dk>
---
 .../boot/dts/socfpga_cyclone5_de10_nano_aud_fb.dts |  34 +-
 arch/arm/configs/socfpga_defconfig                 |   2 +-
 sound/soc/codecs/Kconfig                           |   5 +-
 sound/soc/codecs/Makefile                          |   2 +
 sound/soc/codecs/hsynthpcm5102.c                   | 124 ++++++
 sound/soc/socsynth/Kconfig                         |   8 +
 sound/soc/socsynth/Makefile                        |   3 +
 sound/soc/socsynth/de10-soc-pcm5102-midi.c         | 438 +++++++++++++++++++++
 8 files changed, 613 insertions(+), 3 deletions(-)
 create mode 100644 sound/soc/codecs/hsynthpcm5102.c
 create mode 100644 sound/soc/socsynth/de10-soc-pcm5102-midi.c

diff --git a/arch/arm/boot/dts/socfpga_cyclone5_de10_nano_aud_fb.dts b/arch/arm/boot/dts/socfpga_cyclone5_de10_nano_aud_fb.dts
index 534b9e1..c770ae5 100644
--- a/arch/arm/boot/dts/socfpga_cyclone5_de10_nano_aud_fb.dts
+++ b/arch/arm/boot/dts/socfpga_cyclone5_de10_nano_aud_fb.dts
@@ -62,7 +62,39 @@
 	};
 
 	sound {
-		compatible = "ti,pcm5102a";
+		compatible = "opencores,de10soc-hsynthpcm5102-audio-midi";
+		i2s-controller = <&i2s>;
+		audio-codec = <&hsynthpcm5102_codec>;
+	};
+
+	clk48: clk48 {
+		compatible = "fixed-clock";
+		#clock-cells = <0>;
+		clock-frequency  = <24576000>;
+		clock-output-names = "clk48";
+	};
+
+	clk44: clk44 {
+		compatible = "fixed-clock";
+		#clock-cells = <0>;
+		clock-frequency  = <33868800>;
+		clock-output-names = "clk44";
+	};
+
+	i2s: i2s@0x0 {
+		#sound-dai-cells = <1>;
+		compatible = "opencores,i2s";
+		reg = <0xff200000 0x20>, <0xff200020 0x20>;
+		clocks = <&clk44>, <&clk48>;
+		clock-names = "clk44", "clk48";
+		dmas = <&pdma 0>, <&pdma 1>;
+		dma-names = "tx", "rx";
+	};
+
+	hsynthpcm5102_codec: hsynthpcm5102-codec {
+	#sound-dai-cells = <0>;
+		compatible = "holotr,hsynthpcm5102";
+		status = "okay";
 	};
 
 	bridge@0xc0000000 {
diff --git a/arch/arm/configs/socfpga_defconfig b/arch/arm/configs/socfpga_defconfig
index d383114..c74d6ea 100644
--- a/arch/arm/configs/socfpga_defconfig
+++ b/arch/arm/configs/socfpga_defconfig
@@ -354,4 +354,4 @@ CONFIG_SND_SOC_FSL_ESAI=m
 CONFIG_SND_SOC_IMX_AUDMUX=m
 CONFIG_SND_SOC_I2C_AND_SPI=y
 CONFIG_HZ_1000=y
-CONFIG_SND_SOC_PCM5102A=m
+CONFIG_SND_SOC_DE10_PCM5102_MIDI=m
diff --git a/sound/soc/codecs/Kconfig b/sound/soc/codecs/Kconfig
index 49e8c24..6162113 100644
--- a/sound/soc/codecs/Kconfig
+++ b/sound/soc/codecs/Kconfig
@@ -73,6 +73,7 @@ config SND_SOC_ALL_CODECS
 	select SND_SOC_GTM601
 	select SND_SOC_HDAC_HDMI
 	select SND_SOC_HSYNTH7002
+	select SND_SOC_HSYNTHPCM5102
 	select SND_SOC_ICS43432
 	select SND_SOC_INNO_RK3036
 	select SND_SOC_ISABELLE if I2C
@@ -514,8 +515,10 @@ config SND_SOC_HDMI_CODEC
 	select HDMI
 
 config SND_SOC_HSYNTH7002
-	tristate "Dummy Soc synthesizer codec-driver driver"
+	tristate "Dummy Soc synthesizer codec-driver"
 
+config SND_SOC_HSYNTHPCM5102
+	tristate "Pihat Hsynth Soc synthesizer codec-driver"
 
 config SND_SOC_ES8328
 	tristate "Everest Semi ES8328 CODEC"
diff --git a/sound/soc/codecs/Makefile b/sound/soc/codecs/Makefile
index be562a4..2c4c3f5 100644
--- a/sound/soc/codecs/Makefile
+++ b/sound/soc/codecs/Makefile
@@ -67,6 +67,7 @@ snd-soc-es8328-spi-objs := es8328-spi.o
 snd-soc-gtm601-objs := gtm601.o
 snd-soc-hdac-hdmi-objs := hdac_hdmi.o
 snd-soc-hsynth7002-objs := hsynth7002.o
+snd-soc-hsynthpcm5102-objs := hsynthpcm5102.o
 snd-soc-ics43432-objs := ics43432.o
 snd-soc-inno-rk3036-objs := inno_rk3036.o
 snd-soc-isabelle-objs := isabelle.o
@@ -293,6 +294,7 @@ obj-$(CONFIG_SND_SOC_ES8328_SPI)+= snd-soc-es8328-spi.o
 obj-$(CONFIG_SND_SOC_GTM601)    += snd-soc-gtm601.o
 obj-$(CONFIG_SND_SOC_HDAC_HDMI) += snd-soc-hdac-hdmi.o
 obj-$(CONFIG_SND_SOC_HSYNTH7002)+= snd-soc-hsynth7002.o
+obj-$(CONFIG_SND_SOC_HSYNTHPCM5102)+= snd-soc-hsynthpcm5102.o
 obj-$(CONFIG_SND_SOC_ICS43432)	+= snd-soc-ics43432.o
 obj-$(CONFIG_SND_SOC_INNO_RK3036)	+= snd-soc-inno-rk3036.o
 obj-$(CONFIG_SND_SOC_ISABELLE)	+= snd-soc-isabelle.o
diff --git a/sound/soc/codecs/hsynthpcm5102.c b/sound/soc/codecs/hsynthpcm5102.c
new file mode 100644
index 0000000..dd97160
--- /dev/null
+++ b/sound/soc/codecs/hsynthpcm5102.c
@@ -0,0 +1,124 @@
+/*
+* HSYNTH7002 Soc Synthesizer dummy codec driver
+*
+* Copyright 2017 Holotronic
+*  Michael Brown (the-snowwhite) <producer@holotronic.dk>
+*  based on hsynth7002.c
+*
+* Licensed under the GPL-2.
+*/
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/platform_device.h>
+
+#include <sound/soc.h>
+
+static const struct snd_soc_dapm_widget hsynthpcm5102_widgets[] = {
+    SND_SOC_DAPM_OUTPUT("PCMOUT"),
+    SND_SOC_DAPM_INPUT("HSYNTH"),
+};
+
+static const struct snd_soc_dapm_route hsynthpcm5102_routes[] = {
+	{ "Playback", NULL, "PCMOUT" },
+    { "Capture", NULL, "HSYNTH" },
+};
+
+static int hsynthpcm5102_set_dai_fmt(struct snd_soc_dai *dai, unsigned int fmt)
+{
+    switch (fmt & SND_SOC_DAIFMT_MASTER_MASK) {
+    case SND_SOC_DAIFMT_CBS_CFS:
+        break;
+    default:
+        return -EINVAL;
+    }
+
+    switch (fmt & SND_SOC_DAIFMT_INV_MASK) {
+    case SND_SOC_DAIFMT_NB_NF:
+        break;
+    default:
+        return -EINVAL;
+    }
+
+    switch (fmt & SND_SOC_DAIFMT_FORMAT_MASK) {
+    case SND_SOC_DAIFMT_I2S:
+    case SND_SOC_DAIFMT_DSP_A:
+        break;
+    default:
+        return -EINVAL;
+    }
+
+    return 0;
+}
+
+static const struct snd_soc_dai_ops hsynthpcm5102_dai_ops = {
+    .set_fmt = hsynthpcm5102_set_dai_fmt,
+};
+
+static struct snd_soc_dai_driver hsynthpcm5102_dai = {
+    .name = "hsynthpcm5102-hifi",
+    .playback = {
+        .stream_name = "Playback",
+        .channels_min = 2,
+        .channels_max = 2,
+        .rates = SNDRV_PCM_RATE_8000_192000,
+        .formats = SNDRV_PCM_FMTBIT_S16_LE |
+            SNDRV_PCM_FMTBIT_S24_LE |
+            SNDRV_PCM_FMTBIT_S32_LE,
+    },
+    .capture = {
+        .stream_name = "Capture",
+        .channels_min = 2,
+        .channels_max = 2,
+        .rates = SNDRV_PCM_RATE_8000_192000,
+        .formats = SNDRV_PCM_FMTBIT_S16_LE |
+            SNDRV_PCM_FMTBIT_S24_LE |
+            SNDRV_PCM_FMTBIT_S32_LE,
+        .sig_bits = 20,
+    },
+    .ops = &hsynthpcm5102_dai_ops,
+};
+
+static const struct snd_soc_codec_driver hsynthpcm5102_codec_driver = {
+    .component_driver = {
+        .dapm_widgets = hsynthpcm5102_widgets,
+        .num_dapm_widgets = ARRAY_SIZE(hsynthpcm5102_widgets),
+        .dapm_routes = hsynthpcm5102_routes,
+        .num_dapm_routes = ARRAY_SIZE(hsynthpcm5102_routes),
+    },
+};
+
+static int hsynthpcm5102_probe(struct platform_device *pdev)
+{
+    return snd_soc_register_codec(&pdev->dev, &hsynthpcm5102_codec_driver,
+            &hsynthpcm5102_dai, 1);
+}
+
+static int hsynthpcm5102_remove(struct platform_device *pdev)
+{
+    snd_soc_unregister_codec(&pdev->dev);
+    return 0;
+}
+
+//#ifdef CONFIG_OF
+static const struct of_device_id hsynthpcm5102_dt_ids[] = {
+    { .compatible = "holotr,hsynthpcm5102", },
+    { }
+};
+MODULE_DEVICE_TABLE(of, hsynthpcm5102_dt_ids);
+//#endif
+
+static struct platform_driver hsynthpcm5102_driver = {
+    .driver = {
+        .name = "hsynthpcm5102",
+        .of_match_table	= of_match_ptr(hsynthpcm5102_dt_ids),
+    },
+    .probe = hsynthpcm5102_probe,
+    .remove = hsynthpcm5102_remove,
+};
+module_platform_driver(hsynthpcm5102_driver);
+
+MODULE_AUTHOR("Michael Brown <producer@holotronic.dk>");
+MODULE_DESCRIPTION("HSYNTH7002 Dummy Soc synthesizer codec-driver driver");
+MODULE_LICENSE("GPL v2");
diff --git a/sound/soc/socsynth/Kconfig b/sound/soc/socsynth/Kconfig
index 5486745..ba0f4f6 100644
--- a/sound/soc/socsynth/Kconfig
+++ b/sound/soc/socsynth/Kconfig
@@ -25,3 +25,11 @@ config SND_SOC_DE1_WM8731_MIDI
        select REGMAP_MMIO
        select SND_SOC_HSYNTH7002
        select SND_SOC_HSYNTHDMA
+
+config SND_SOC_DE10_PCM5102_MIDI
+       tristate "DE10-Nano-Audio MIDI support"
+       select SND_SOC_HSYNTHPCM5102
+       select SND_SOC_OC_I2S
+       select SND_SOC_GENERIC_DMAENGINE_PCM
+       select SND_RAWMIDI
+       select REGMAP_MMIO
diff --git a/sound/soc/socsynth/Makefile b/sound/soc/socsynth/Makefile
index d0ec5df..87b0b1e 100644
--- a/sound/soc/socsynth/Makefile
+++ b/sound/soc/socsynth/Makefile
@@ -6,3 +6,6 @@ obj-$(CONFIG_SND_SOC_DE1_WM8731_MIDI) += snd-de1-soc-wm8731-midi.o
 
 snd-soc-hsynthdma-objs := hsynthdma.o
 obj-$(CONFIG_SND_SOC_HSYNTHDMA) += snd-soc-hsynthdma.o
+
+snd-de10-soc-pcm5102-midi-objs := de10-soc-pcm5102-midi.o
+obj-$(CONFIG_SND_SOC_DE1_WM8731_MIDI) += snd-de10-soc-pcm5102-midi.o
diff --git a/sound/soc/socsynth/de10-soc-pcm5102-midi.c b/sound/soc/socsynth/de10-soc-pcm5102-midi.c
new file mode 100644
index 0000000..1ffc0e3
--- /dev/null
+++ b/sound/soc/socsynth/de10-soc-pcm5102-midi.c
@@ -0,0 +1,438 @@
+/*
+* de1-soc-wm8731 -- SoC audio for Terasic DE1-SoC board
+* Author: B. Steinsbo <bsteinsbo@gmail.com>
+*
+* Based on sam9g20_wm8731 by
+* Sedji Gaouaou <sedji.gaouaou@atmel.com>
+*
+* Licensed under the GPL-2.
+*/
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/clk.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/gpio.h>
+#include <linux/of_gpio.h>
+#include <linux/uaccess.h>
+#include <linux/ioport.h>
+#include <linux/io.h>
+
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/soc.h>
+#include <sound/seq_kernel.h>
+#include <sound/rawmidi.h>
+#include <sound/initval.h>
+
+#define SOCSYNTHMIDI_LOG_PREFIX "socsynthmidi: "
+#define midi_ins 0
+#define midi_outs 1
+
+#define MIDIREG_BASE 0xff200000
+#define MIDIREG_SIZE PAGE_SIZE
+#define MIDIREG_OFFSET 0x50000
+
+//#define WM8731_SYSCLK_XTAL 1
+//#define WM8731_SYSCLK_MCLK 2
+#define MCLK_RATE_48K 12288000 /* fs*256 */
+#define MCLK_RATE_44K 16934400 /* fs*384 */
+
+#define printe(...) pr_err(SOCSYNTHMIDI_LOG_PREFIX __VA_ARGS__)
+
+static int snd_socmidi_open(struct snd_rawmidi_substream *substream);
+static int snd_socmidi_close(struct snd_rawmidi_substream *substream);
+static int hmidi_card_probe(struct snd_soc_card *card);
+static int hmidi_card_remove(struct snd_soc_card *card);
+static void snd_socmidi_transmit(unsigned char data);
+static void snd_socmidi_output_trigger(struct snd_rawmidi_substream *substream, int);
+static int hsound_midi_init(struct snd_card *card);
+
+void *midireg_mem;
+
+static int snd_socmidi_open(struct snd_rawmidi_substream *substream)
+{
+    return 0;
+}
+
+static int snd_socmidi_close(struct snd_rawmidi_substream *substream)
+{
+    return 0;
+}
+
+static int hmidi_card_probe(struct snd_soc_card *card)
+{
+    int err;
+
+    err = hsound_midi_init(card->snd_card);
+
+    if (err < 0) {
+        //		dev_dbg(&pdev->dev,"hsound_midi_init failed: %d\n", err);
+        return err;
+    }
+
+    return 0;
+}
+
+static int hmidi_card_remove(struct snd_soc_card *card)
+{
+    return 0;
+}
+
+static void snd_socmidi_transmit(unsigned char data){
+
+    iowrite8(data, midireg_mem);
+
+}
+
+static void snd_socmidi_output_trigger(struct snd_rawmidi_substream *substream, int up) {
+
+    if (!up)
+        return;
+
+    while (1) {
+        unsigned char data;
+        if (snd_rawmidi_transmit(substream, &data, 1) != 1)
+            break; /* no more data */
+        snd_socmidi_transmit(data);
+    }
+}
+
+static struct snd_rawmidi *g_rmidi;
+
+static struct snd_rawmidi_ops snd_socmidi_output_ops = {
+    .open = snd_socmidi_open,
+    .close = snd_socmidi_close,
+    .trigger = snd_socmidi_output_trigger,
+};
+
+static void pisnd_get_port_info(struct snd_rawmidi *rmidi, int number, struct snd_seq_port_info *seq_port_info)
+{
+    seq_port_info->type =
+    SNDRV_SEQ_PORT_TYPE_MIDI_GENERIC |
+    SNDRV_SEQ_PORT_TYPE_HARDWARE |
+    SNDRV_SEQ_PORT_TYPE_PORT;
+    seq_port_info->midi_voices = 0;
+}
+
+static struct snd_rawmidi_global_ops hsnd_global_ops = {.get_port_info = pisnd_get_port_info, };
+
+static int hsound_midi_init(struct snd_card *card)
+{
+    int err;
+    struct resource *res;
+
+    err = snd_rawmidi_new(card, "SocMIDI", 0, midi_outs, midi_ins, &g_rmidi);
+
+    if (err < 0) {
+        printe("snd_rawmidi_new failed: %d\n", err);
+        return err;
+    }
+
+    strcpy(g_rmidi->name, "Holosynth MIDI ");
+
+    g_rmidi->info_flags = SNDRV_RAWMIDI_INFO_OUTPUT;
+    // rmidi->info_flags = SNDRV_RAWMIDI_INFO_OUTPUT |
+    //                     SNDRV_RAWMIDI_INFO_INPUT |
+    //                     SNDRV_RAWMIDI_INFO_DUPLEX;
+
+    g_rmidi->ops = &hsnd_global_ops;
+
+    g_rmidi->private_data = (void *)0;
+
+    snd_rawmidi_set_ops(g_rmidi, SNDRV_RAWMIDI_STREAM_OUTPUT, &snd_socmidi_output_ops);
+    //    snd_rawmidi_set_ops(rmidi, SNDRV_RAWMIDI_STREAM_INPUT, &snd_socmidi_input_ops);
+
+    res = request_mem_region((MIDIREG_BASE + MIDIREG_OFFSET), MIDIREG_SIZE, "MIDIREG");
+    if (res == NULL) {
+        return -EBUSY;
+    }
+
+    midireg_mem = ioremap((MIDIREG_BASE + MIDIREG_OFFSET), MIDIREG_SIZE);
+    if (midireg_mem == NULL) {
+        release_mem_region(MIDIREG_BASE, MIDIREG_SIZE);
+        return -EFAULT;
+    }
+
+    return 0;
+}
+
+static unsigned int i2c_mux_gpio;
+
+static int de10soc_hw_params(struct snd_pcm_substream *substream,
+    struct snd_pcm_hw_params *params)
+{
+    struct snd_soc_pcm_runtime *rtd = substream->private_data;
+//    struct snd_soc_dai *codec_dai = rtd->codec_dai;
+    struct device *dev = rtd->card->dev;
+    unsigned int mclk_freq;
+//    int ret;
+
+    if ((params_rate(params) % 44100) == 0) {
+        mclk_freq = MCLK_RATE_44K;
+    } else if ((params_rate(params) % 48000) == 0) {
+        mclk_freq = MCLK_RATE_48K;
+    } else
+        return -EINVAL;
+
+    /* set codec mclk configuration */
+//     ret = snd_soc_dai_set_sysclk(codec_dai, WM8731_SYSCLK_MCLK,
+//         mclk_freq, SND_SOC_CLOCK_OUT);
+//     if (ret < 0)
+//         return ret;
+
+    dev_dbg(dev, "hw_params: mclk_freq=%d\n", mclk_freq);
+    return 0;
+}
+
+// static void de10soc_shutdown(struct snd_pcm_substream *substream)
+// {
+//     struct snd_soc_pcm_runtime *rtd = substream->private_data;
+//     struct snd_soc_dai *codec_dai = rtd->codec_dai;
+//     struct device *dev = rtd->card->dev;
+//     int ret;
+//
+//     dev_dbg(dev, "shutdown\n");
+//     ret = snd_soc_dai_set_sysclk(codec_dai, WM8731_SYSCLK_MCLK,
+//         0, SND_SOC_CLOCK_OUT);
+//     if (ret < 0) {
+//         dev_err(dev, "Failed to reset WM8731 SYSCLK: %d\n", ret);
+//     }
+// }
+
+static struct snd_soc_ops de10soc_ops = {
+    // .startup
+//    .shutdown = de10soc_shutdown,
+    .hw_params = de10soc_hw_params,
+    // .hw_free
+    // .prepare
+    // .trigger
+};
+
+static const struct snd_soc_dapm_widget de10soc_dapm_widgets[] = {
+    SND_SOC_DAPM_LINE("Line Out", NULL),
+    SND_SOC_DAPM_LINE("Hsynth in", NULL),
+};
+
+static const struct snd_soc_dapm_route intercon[] = {
+    {"Line Out", NULL, "PCMOUT"},
+    {"HSYNTH", NULL, "Hsynth in"},
+};
+
+static int de10soc_hsynthpcm5102_init(struct snd_soc_pcm_runtime *rtd)
+{
+    struct snd_soc_dai *codec_dai = rtd->codec_dai;
+    struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
+    struct device *dev = rtd->card->dev;
+    unsigned int fmt;
+    int ret;
+
+    dev_dbg(dev, "init\n");
+
+    fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
+        SND_SOC_DAIFMT_CBS_CFS;
+
+    /* set cpu DAI configuration */
+    ret = snd_soc_dai_set_fmt(cpu_dai, fmt);
+    if (ret < 0)
+        return ret;
+
+    /* set codec DAI configuration */
+    ret = snd_soc_dai_set_fmt(codec_dai, fmt);
+    if (ret < 0)
+        return ret;
+
+    /* Don't let codec constraints interfere */
+//     ret = snd_soc_dai_set_sysclk(codec_dai, WM8731_SYSCLK_MCLK,
+//         0, SND_SOC_CLOCK_OUT);
+//     if (ret < 0) {
+//         dev_err(dev, "Failed to set WM8731 SYSCLK: %d\n", ret);
+//         return ret;
+//     }
+
+    return 0;
+}
+
+// static int soc_hsynth_init(struct snd_soc_pcm_runtime *rtd)
+// {
+//     struct snd_soc_dai *codec_dai = rtd->codec_dai;
+//     struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
+//     struct device *dev = rtd->card->dev;
+//     unsigned int fmt;
+//     int ret;
+//
+//     dev_dbg(dev, "init\n");
+//
+//     fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
+//     SND_SOC_DAIFMT_CBS_CFS;
+//
+//     /* set cpu DAI configuration */
+//     ret = snd_soc_dai_set_fmt(cpu_dai, fmt);
+//     if (ret < 0)
+//         return ret;
+//
+//     /* set codec DAI configuration */
+//     ret = snd_soc_dai_set_fmt(codec_dai, fmt);
+//     if (ret < 0)
+//         return ret;
+//
+//     return 0;
+// }
+
+static struct snd_soc_dai_link de10soc_dai = {
+//	{ /* Primary DAI i/f */
+    .name = "SSND0",
+    .stream_name = "HSYNTH PCM5102",
+    .cpu_dai_name = "ff200000.i2s",
+    .codec_dai_name = "hsynthpcm5102-hifi",
+    .init = de10soc_hsynthpcm5102_init,
+    .platform_name = "de10soc",
+    .codec_name = "hsynthpcm5102.hsynth",
+    .ops = &de10soc_ops,
+// 	}, { /* Sec_Fifo Playback i/f */
+//     .name = "SSND1",
+//     .stream_name = "HSYNTH PCM",
+//     .cpu_dai_name = "ff200000.dmalink",
+//     .codec_dai_name = "hsynth7002-hifi",
+//     .init = soc_hsynth_init,
+//     .platform_name = "de10soc",
+//     .codec_name = "hsynth7002.hsynth",
+//	},
+};
+
+static struct snd_soc_card snd_soc_de10soc = {
+    .name = "DE10SND",
+    .owner = THIS_MODULE,
+    .dai_link = &de10soc_dai,
+//    .num_links = ARRAY_SIZE(de10soc_dai),
+    .num_links = 1,
+
+    .probe        = hmidi_card_probe,
+    .remove       = hmidi_card_remove,
+
+    .dapm_widgets = de10soc_dapm_widgets,
+    .num_dapm_widgets = ARRAY_SIZE(de10soc_dapm_widgets),
+    .dapm_routes = intercon,
+    .num_dapm_routes = ARRAY_SIZE(intercon),
+};
+
+static int de10soc_audio_probe(struct platform_device *pdev)
+{
+    struct device_node *np = pdev->dev.of_node;
+    struct device_node *codec_np, *cpu_np;
+    struct snd_soc_card *card = &snd_soc_de10soc;
+    int ret;
+
+    if (!np) {
+        return -ENODEV;
+    }
+
+    card->dev = &pdev->dev;
+
+    /* I2C bus is muxed between HPS and FPGA. Set mux to HPS */
+//     i2c_mux_gpio = of_get_named_gpio(np, "i2c-mux-gpio", 0);
+//     if (gpio_is_valid(i2c_mux_gpio)) {
+//         ret = devm_gpio_request_one(&pdev->dev,
+//             i2c_mux_gpio, GPIOF_OUT_INIT_LOW, "I2C_MUX");
+//         if (ret) {
+//             dev_err(&pdev->dev,
+//                 "Failed to request GPIO_%d for i2c_mux: %d\n",
+//                 i2c_mux_gpio, ret);
+//             return ret;
+//         }
+//         gpio_set_value(i2c_mux_gpio, 1);
+//     }
+
+    /* Parse codec1 info */
+    de10soc_dai.codec_name = NULL;
+    codec_np = of_parse_phandle(np, "audio-codec", 0);
+    if (!codec_np) {
+        dev_err(&pdev->dev, "audio-codec info missing\n");
+        return -EINVAL;
+    }
+    de10soc_dai.codec_of_node = codec_np;
+
+    /* Parse dai and platform info */
+    de10soc_dai.cpu_dai_name = NULL;
+    de10soc_dai.platform_name = NULL;
+    cpu_np = of_parse_phandle(np, "i2s-controller", 0);
+    if (!cpu_np) {
+        dev_err(&pdev->dev, "i2s dai1 and pcm info missing\n");
+        return -EINVAL;
+    }
+
+    de10soc_dai.cpu_of_node = cpu_np;
+    de10soc_dai.platform_of_node = cpu_np;
+
+    of_node_put(codec_np);
+    of_node_put(cpu_np);
+
+    /* Parse codec2 info */
+//     de10soc_dai[1].codec_name = NULL;
+//     codec_np = of_parse_phandle(np, "synth-codec", 0);
+//     if (!codec_np) {
+//         dev_err(&pdev->dev, "synth-codec info missing\n");
+//         return -EINVAL;
+//     }
+//     de10soc_dai[1].codec_of_node = codec_np;
+//
+//     /* Parse dai and platform info */
+//     de10soc_dai[1].cpu_dai_name = NULL;
+//     de10soc_dai[1].platform_name = NULL;
+//     cpu_np = of_parse_phandle(np, "dmalink-controller", 0);
+//     if (!cpu_np) {
+//         dev_err(&pdev->dev, "dmalink-controller info missing\n");
+//         return -EINVAL;
+//     }
+//
+//     de10soc_dai[1].cpu_of_node = cpu_np;
+//     de10soc_dai[1].platform_of_node = cpu_np;
+//
+//     of_node_put(codec_np);
+//     of_node_put(cpu_np);
+//
+
+    ret = snd_soc_register_card(card);
+    if (ret) {
+        dev_err(&pdev->dev, "snd_soc_register_card() failed\n");
+    }
+
+    return ret;
+}
+
+static int de10soc_audio_remove(struct platform_device *pdev)
+{
+    struct snd_soc_card *card = platform_get_drvdata(pdev);
+
+    if (gpio_is_valid(i2c_mux_gpio))
+        devm_gpio_free(&pdev->dev, i2c_mux_gpio);
+
+    snd_soc_unregister_card(card);
+
+    return 0;
+}
+
+static const struct of_device_id de10soc_hsynthpcm5102_dt_ids[] = {
+    { .compatible = "opencores,de10soc-hsynthpcm5102-audio-midi", },
+    { }
+};
+MODULE_DEVICE_TABLE(of, de10soc_hsynthpcm5102_dt_ids);
+
+static struct platform_driver de10soc_audio_driver = {
+    .driver = {
+        .name	= "de10soc-audio",
+        .owner	= THIS_MODULE,
+        .of_match_table = of_match_ptr(de10soc_hsynthpcm5102_dt_ids),
+    },
+    .probe	= de10soc_audio_probe,
+    .remove	= de10soc_audio_remove,
+};
+
+module_platform_driver(de10soc_audio_driver);
+
+/* Module information */
+MODULE_AUTHOR("Bjarne Steinsbo <bsteinsbo@gmail.com>");
+MODULE_DESCRIPTION("ALSA SoC DE10-SoC_PWM5102");
+MODULE_LICENSE("GPL");
-- 
2.7.4

