From 15c7aa1f34f3f0c87c6ddda81cb1a26a3e103cb1 Mon Sep 17 00:00:00 2001
From: Michael Brown <producer@holotronic.dk>
Date: Sun, 29 Apr 2018 02:00:12 +0200
Subject: [PATCH 14/18] Convert de1-soc-wm8731 to de1-soc-wm8731-midi hsynth
 driver remove hsynthdma and holosynth driver

Signed-off-by: Michael Brown <producer@holotronic.dk>

Add hsynth dma audio to de1-soc-wm8731-midi driver

Signed-off-by: Michael Brown <producer@holotronic.dk>
---
 arch/arm/boot/dts/socfpga_cyclone5_de1_soc.dts |  70 ++--
 arch/arm/configs/socfpga_defconfig             |   3 +-
 sound/soc/codecs/hsynth7002.c                  |   8 +-
 sound/soc/socsynth/Kconfig                     |  32 +-
 sound/soc/socsynth/Makefile                    |   7 +-
 sound/soc/socsynth/de1-soc-wm8731-midi.c       | 458 +++++++++++++++++++++++++
 sound/soc/socsynth/de1-soc-wm8731.c            | 247 -------------
 sound/soc/socsynth/holosynthv.c                | 292 ----------------
 8 files changed, 518 insertions(+), 599 deletions(-)
 create mode 100644 sound/soc/socsynth/de1-soc-wm8731-midi.c
 delete mode 100644 sound/soc/socsynth/de1-soc-wm8731.c
 delete mode 100644 sound/soc/socsynth/holosynthv.c

diff --git a/arch/arm/boot/dts/socfpga_cyclone5_de1_soc.dts b/arch/arm/boot/dts/socfpga_cyclone5_de1_soc.dts
index 8912581..a366b7b 100644
--- a/arch/arm/boot/dts/socfpga_cyclone5_de1_soc.dts
+++ b/arch/arm/boot/dts/socfpga_cyclone5_de1_soc.dts
@@ -1,18 +1,18 @@
 /*
- * Copyright Intel Corporation (C) 2017. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms and conditions of the GNU General Public License,
- * version 2, as published by the Free Software Foundation.
- *
- * This program is distributed in the hope it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
- * more details.
- *
- * You should have received a copy of the GNU General Public License along with
- * this program.  If not, see <http://www.gnu.org/licenses/>.
- */
+* Copyright Intel Corporation (C) 2017. All rights reserved.
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms and conditions of the GNU General Public License,
+* version 2, as published by the Free Software Foundation.
+*
+* This program is distributed in the hope it will be useful, but WITHOUT
+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+* more details.
+*
+* You should have received a copy of the GNU General Public License along with
+* this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
 
 #include "socfpga_cyclone5.dtsi"
 
@@ -61,12 +61,14 @@
 		};
 	};
 
-    sound {
-		compatible = "opencores,de1soc-wm8731-audio";
+	sound {
+		compatible = "opencores,de1soc-wm8731-audio-midi";
 		i2s-controller = <&i2s>;
 		audio-codec = <&wm8731>;
 		i2c-mux-gpio = <&portb 19 0>;
-    };
+		dmalink-controller = <&dmalink>;
+		synth-codec = <&hsynth7002_codec>;
+	};
 
 	clk48: clk48 {
 		compatible = "fixed-clock";
@@ -85,11 +87,28 @@
 	i2s: i2s@0x0 {
 		#sound-dai-cells = <1>;
 		compatible = "opencores,i2s";
-		reg = <0xff200000 0x40>, <0xff200040 0x20>;
+		reg = <0xff200000 0x20>, <0xff200040 0x20>;
 		clocks = <&clk44>, <&clk48>;
 		clock-names = "clk44", "clk48";
-		dmas = <&pdma 0>, <&pdma 1>;
-		dma-names = "tx", "rx";
+		dmas = <&pdma 0>, <&pdma 1>, <&pdma 2>;
+		dma-names = "tx", "rx", "rx";
+	};
+
+	dmalink: dmalink@0x20 {
+		#sound-dai-cells = <1>;
+		compatible = "holotr,dmalink";
+		reg = <0xff200020 0x20>, <0xff200060 0x20>;
+		clocks = <&clk44>;
+		clock-names = "clk44";
+		dmas = <&pdma 2>;
+		dma-names = "rx";
+	};
+
+	hsynth7002_codec: hsynth7002-codec {
+	#sound-dai-cells = <0>;
+		compatible = "holotr,hsynth7002";
+/*     IOVDD-supply = <&supply>;*/
+		status = "okay";
 	};
 
 	bridge@0xc0000000 {
@@ -176,22 +195,13 @@
 		}; //end gpio@0x100010040 (led_pio)
 
 		uio-socfpg0@0x100040000 {
-            compatible = "generic-uio,ui_pdrv";
+			compatible = "generic-uio,ui_pdrv";
 			reg = <0x00000001 0x00040000 0x00010000>;
 			interrupt-parent = <0x2>;
 			interrupts = <0 43 4>;
 			address_width = <14>;
 			data_width = <32>;
 		};
-
-		socmidi@0x100050000 {
-			compatible = "holotr,socmidi-1.0";
-			reg = <0x00000001 0x00050000 0x00010000>;
-			interrupt-parent = <0x2>;
-			interrupts = <0 44 4>;
-			address_width = <3>;   /* embeddedsw.dts.params.address_width type NUMBER */
-			data_width = <8>;      /* embeddedsw.dts.params.data_width type NUMBER */
-		};
 	};
 };
 
diff --git a/arch/arm/configs/socfpga_defconfig b/arch/arm/configs/socfpga_defconfig
index f340c40..dbb07f2 100644
--- a/arch/arm/configs/socfpga_defconfig
+++ b/arch/arm/configs/socfpga_defconfig
@@ -305,8 +305,7 @@ CONFIG_SND_SOC_SSM2602=m
 CONFIG_SND_SOC_SSM2602_I2C=m
 CONFIG_SND_ALOOP=m
 CONFIG_SND_VIRMIDI=m
-CONFIG_SND_SOC_HOLOSYNTHV=m
-CONFIG_SND_SOC_DE1_WM8731=m
+CONFIG_SND_SOC_DE1_WM8731_MIDI=m
 CONFIG_SND_SOC_PCM5102A=m
 CONFIG_FPGADMA=m
 CONFIG_REGMAP_I2C=y
diff --git a/sound/soc/codecs/hsynth7002.c b/sound/soc/codecs/hsynth7002.c
index 1c54d02..b1898b3 100644
--- a/sound/soc/codecs/hsynth7002.c
+++ b/sound/soc/codecs/hsynth7002.c
@@ -16,13 +16,13 @@
 #include <sound/soc.h>
 
 static const struct snd_soc_dapm_widget hsynth7002_widgets[] = {
-	SND_SOC_DAPM_INPUT("PDM_DAT"),
-	SND_SOC_DAPM_REGULATOR_SUPPLY("IOVDD", 0, 0),
+	SND_SOC_DAPM_INPUT("HSYNTH"),
+//	SND_SOC_DAPM_REGULATOR_SUPPLY("IOVDD", 0, 0),
 };
 
 static const struct snd_soc_dapm_route hsynth7002_routes[] = {
-	{ "Capture", NULL, "PDM_DAT" },
-	{ "Capture", NULL, "IOVDD" },
+	{ "Capture", NULL, "HSYNTH" },
+//	{ "Capture", NULL, "IOVDD" },
 };
 
 static int hsynth7002_set_dai_fmt(struct snd_soc_dai *dai, unsigned int fmt)
diff --git a/sound/soc/socsynth/Kconfig b/sound/soc/socsynth/Kconfig
index 572c882..5486745 100644
--- a/sound/soc/socsynth/Kconfig
+++ b/sound/soc/socsynth/Kconfig
@@ -1,12 +1,3 @@
-config SND_SOC_HSYNTHDMA
-       tristate "holosynth DMA Controller"
-       help
-         If you say yes to this option, support will be included for the
-         HSYNTHDMA dma controller. For details see
-
-         This driver can also be built as a module.  If so, the module
-         will be called hsynthdma.
-
 config SND_SOC_OC_I2S
        tristate "OpenCores I2S Controller"
        help
@@ -16,18 +7,21 @@ config SND_SOC_OC_I2S
          This driver can also be built as a module.  If so, the module
          will be called opencores_i2s.
 
-config SND_SOC_HOLOSYNTHV
-       tristate "SOC-Synthsizer support"
-       select SND_SOC_HSYNTH7002
-       select SND_SOC_HSYNTHDMA
-       select SND_SOC_GENERIC_DMAENGINE_PCM
-       select SND_RAWMIDI
-       select REGMAP_MMIO
+config SND_SOC_HSYNTHDMA
+       tristate "holosynth DMA Controller"
        help
-         ASoC driver for fpga Sound Synthesizer peripheral with pcm / rawmidi support.
+         If you say yes to this option, support will be included for the
+         HSYNTHDMA dma controller. For details see
+
+         This driver can also be built as a module.  If so, the module
+         will be called hsynthdma.
 
-config SND_SOC_DE1_WM8731
-       tristate "DE1-Audio support"
+config SND_SOC_DE1_WM8731_MIDI
+       tristate "DE1-Audio MIDI support"
        select SND_SOC_WM8731
        select SND_SOC_OC_I2S
+       select SND_SOC_GENERIC_DMAENGINE_PCM
+       select SND_RAWMIDI
        select REGMAP_MMIO
+       select SND_SOC_HSYNTH7002
+       select SND_SOC_HSYNTHDMA
diff --git a/sound/soc/socsynth/Makefile b/sound/soc/socsynth/Makefile
index d9e999e..d0ec5df 100644
--- a/sound/soc/socsynth/Makefile
+++ b/sound/soc/socsynth/Makefile
@@ -1,11 +1,8 @@
 snd-soc-opencores_i2s-objs := opencores_i2s.o
 obj-$(CONFIG_SND_SOC_OC_I2S) += snd-soc-opencores_i2s.o
 
-snd-de1-soc-wm8731-objs := de1-soc-wm8731.o
-obj-$(CONFIG_SND_SOC_DE1_WM8731) += snd-de1-soc-wm8731.o
+snd-de1-soc-wm8731-midi-objs := de1-soc-wm8731-midi.o
+obj-$(CONFIG_SND_SOC_DE1_WM8731_MIDI) += snd-de1-soc-wm8731-midi.o
 
 snd-soc-hsynthdma-objs := hsynthdma.o
 obj-$(CONFIG_SND_SOC_HSYNTHDMA) += snd-soc-hsynthdma.o
-
-snd-soc-holosynthv-objs := holosynthv.o
-obj-$(CONFIG_SND_SOC_HOLOSYNTHV) += snd-soc-holosynthv.o
diff --git a/sound/soc/socsynth/de1-soc-wm8731-midi.c b/sound/soc/socsynth/de1-soc-wm8731-midi.c
new file mode 100644
index 0000000..6203172
--- /dev/null
+++ b/sound/soc/socsynth/de1-soc-wm8731-midi.c
@@ -0,0 +1,458 @@
+/*
+* de1-soc-wm8731 -- SoC audio for Terasic DE1-SoC board
+* Author: B. Steinsbo <bsteinsbo@gmail.com>
+*
+* Based on sam9g20_wm8731 by
+* Sedji Gaouaou <sedji.gaouaou@atmel.com>
+*
+* Licensed under the GPL-2.
+*/
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/clk.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/gpio.h>
+#include <linux/of_gpio.h>
+#include <linux/uaccess.h>
+#include <linux/ioport.h>
+#include <linux/io.h>
+
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/soc.h>
+#include <sound/seq_kernel.h>
+#include <sound/rawmidi.h>
+#include <sound/initval.h>
+
+#define SOCSYNTHMIDI_LOG_PREFIX "socsynthmidi: "
+#define midi_ins 0
+#define midi_outs 1
+
+#define MIDIREG_BASE 0xff200000
+#define MIDIREG_SIZE PAGE_SIZE
+#define MIDIREG_OFFSET 0x50000
+
+#define WM8731_SYSCLK_XTAL 1
+#define WM8731_SYSCLK_MCLK 2
+#define MCLK_RATE_48K 12288000 /* fs*256 */
+#define MCLK_RATE_44K 16934400 /* fs*384 */
+
+#define printe(...) pr_err(SOCSYNTHMIDI_LOG_PREFIX __VA_ARGS__)
+
+static int snd_socmidi_open(struct snd_rawmidi_substream *substream);
+static int snd_socmidi_close(struct snd_rawmidi_substream *substream);
+static int hmidi_card_probe(struct snd_soc_card *card);
+static int hmidi_card_remove(struct snd_soc_card *card);
+static void snd_socmidi_transmit(unsigned char data);
+static void snd_socmidi_output_trigger(struct snd_rawmidi_substream *substream, int);
+static int hsound_midi_init(struct snd_card *card);
+
+void *midireg_mem;
+
+static int snd_socmidi_open(struct snd_rawmidi_substream *substream)
+{
+    return 0;
+}
+
+static int snd_socmidi_close(struct snd_rawmidi_substream *substream)
+{
+    return 0;
+}
+
+static int hmidi_card_probe(struct snd_soc_card *card)
+{
+    int err;
+
+    err = hsound_midi_init(card->snd_card);
+
+    if (err < 0) {
+        //		dev_dbg(&pdev->dev,"hsound_midi_init failed: %d\n", err);
+        return err;
+    }
+
+    return 0;
+}
+
+static int hmidi_card_remove(struct snd_soc_card *card)
+{
+    return 0;
+}
+
+static void snd_socmidi_transmit(unsigned char data){
+
+    iowrite8(data, midireg_mem);
+
+}
+
+static void snd_socmidi_output_trigger(struct snd_rawmidi_substream *substream, int up) {
+
+    if (!up)
+        return;
+
+    while (1) {
+        unsigned char data;
+        if (snd_rawmidi_transmit(substream, &data, 1) != 1)
+            break; /* no more data */
+        snd_socmidi_transmit(data);
+    }
+}
+
+static struct snd_rawmidi *g_rmidi;
+
+static struct snd_rawmidi_ops snd_socmidi_output_ops = {
+    .open = snd_socmidi_open,
+    .close = snd_socmidi_close,
+    .trigger = snd_socmidi_output_trigger,
+};
+
+static void pisnd_get_port_info(struct snd_rawmidi *rmidi, int number, struct snd_seq_port_info *seq_port_info)
+{
+    seq_port_info->type =
+    SNDRV_SEQ_PORT_TYPE_MIDI_GENERIC |
+    SNDRV_SEQ_PORT_TYPE_HARDWARE |
+    SNDRV_SEQ_PORT_TYPE_PORT;
+    seq_port_info->midi_voices = 0;
+}
+
+static struct snd_rawmidi_global_ops hsnd_global_ops = {.get_port_info = pisnd_get_port_info, };
+
+static int hsound_midi_init(struct snd_card *card)
+{
+    int err;
+    struct resource *res;
+
+    err = snd_rawmidi_new(card, "SocMIDI", 0, midi_outs, midi_ins, &g_rmidi);
+
+    if (err < 0) {
+        printe("snd_rawmidi_new failed: %d\n", err);
+        return err;
+    }
+
+    strcpy(g_rmidi->name, "Holosynth MIDI ");
+
+    g_rmidi->info_flags = SNDRV_RAWMIDI_INFO_OUTPUT;
+    // rmidi->info_flags = SNDRV_RAWMIDI_INFO_OUTPUT |
+    //                     SNDRV_RAWMIDI_INFO_INPUT |
+    //                     SNDRV_RAWMIDI_INFO_DUPLEX;
+
+    g_rmidi->ops = &hsnd_global_ops;
+
+    g_rmidi->private_data = (void *)0;
+
+    snd_rawmidi_set_ops(g_rmidi, SNDRV_RAWMIDI_STREAM_OUTPUT, &snd_socmidi_output_ops);
+    //    snd_rawmidi_set_ops(rmidi, SNDRV_RAWMIDI_STREAM_INPUT, &snd_socmidi_input_ops);
+
+    res = request_mem_region((MIDIREG_BASE + MIDIREG_OFFSET), MIDIREG_SIZE, "MIDIREG");
+    if (res == NULL) {
+        return -EBUSY;
+    }
+
+    midireg_mem = ioremap((MIDIREG_BASE + MIDIREG_OFFSET), MIDIREG_SIZE);
+    if (midireg_mem == NULL) {
+        release_mem_region(MIDIREG_BASE, MIDIREG_SIZE);
+        return -EFAULT;
+    }
+
+    return 0;
+}
+
+static unsigned int i2c_mux_gpio;
+
+static int de1soc_hw_params(struct snd_pcm_substream *substream,
+    struct snd_pcm_hw_params *params)
+{
+    struct snd_soc_pcm_runtime *rtd = substream->private_data;
+    struct snd_soc_dai *codec_dai = rtd->codec_dai;
+    struct device *dev = rtd->card->dev;
+    unsigned int mclk_freq;
+    int ret;
+
+    if ((params_rate(params) % 44100) == 0) {
+        mclk_freq = MCLK_RATE_44K;
+    } else if ((params_rate(params) % 48000) == 0) {
+        mclk_freq = MCLK_RATE_48K;
+    } else
+        return -EINVAL;
+
+    /* set codec mclk configuration */
+    ret = snd_soc_dai_set_sysclk(codec_dai, WM8731_SYSCLK_MCLK,
+        mclk_freq, SND_SOC_CLOCK_OUT);
+    if (ret < 0)
+        return ret;
+
+    dev_dbg(dev, "hw_params: mclk_freq=%d\n", mclk_freq);
+    return 0;
+}
+
+static void de1soc_shutdown(struct snd_pcm_substream *substream)
+{
+    struct snd_soc_pcm_runtime *rtd = substream->private_data;
+    struct snd_soc_dai *codec_dai = rtd->codec_dai;
+    struct device *dev = rtd->card->dev;
+    int ret;
+
+    dev_dbg(dev, "shutdown\n");
+    ret = snd_soc_dai_set_sysclk(codec_dai, WM8731_SYSCLK_MCLK,
+        0, SND_SOC_CLOCK_OUT);
+    if (ret < 0) {
+        dev_err(dev, "Failed to reset WM8731 SYSCLK: %d\n", ret);
+    }
+}
+
+static struct snd_soc_ops de1soc_ops = {
+    // .startup
+    .shutdown = de1soc_shutdown,
+    .hw_params = de1soc_hw_params,
+    // .hw_free
+    // .prepare
+    // .trigger
+};
+
+static const struct snd_soc_dapm_widget de1soc_dapm_widgets[] = {
+    SND_SOC_DAPM_HP("Headphone Jack", NULL),
+    SND_SOC_DAPM_MIC("Microphone Jack", NULL),
+    SND_SOC_DAPM_LINE("Line In Jack", NULL),
+    SND_SOC_DAPM_LINE("Line Out Jack", NULL),
+    SND_SOC_DAPM_LINE("Hsynth in", NULL),
+};
+
+static const struct snd_soc_dapm_route intercon[] = {
+    {"MICIN", NULL, "Mic Bias"},
+    {"Mic Bias", NULL, "Microphone Jack"},
+    {"LLINEIN", NULL, "Line In Jack"},
+    {"RLINEIN", NULL, "Line In Jack"},
+    {"Line Out Jack", NULL, "LOUT"},
+    {"Line Out Jack", NULL, "ROUT"},
+    {"Headphone Jack", NULL, "LHPOUT"},
+    {"Headphone Jack", NULL, "RHPOUT"},
+    {"HSYNTH", NULL, "Hsynth in"},
+};
+
+static int de1soc_wm8731_init(struct snd_soc_pcm_runtime *rtd)
+{
+    struct snd_soc_dai *codec_dai = rtd->codec_dai;
+    struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
+    struct device *dev = rtd->card->dev;
+    unsigned int fmt;
+    int ret;
+
+    dev_dbg(dev, "init\n");
+
+    fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
+        SND_SOC_DAIFMT_CBS_CFS;
+
+    /* set cpu DAI configuration */
+    ret = snd_soc_dai_set_fmt(cpu_dai, fmt);
+    if (ret < 0)
+        return ret;
+
+    /* set codec DAI configuration */
+    ret = snd_soc_dai_set_fmt(codec_dai, fmt);
+    if (ret < 0)
+        return ret;
+
+    /* Don't let codec constraints interfere */
+    ret = snd_soc_dai_set_sysclk(codec_dai, WM8731_SYSCLK_MCLK,
+        0, SND_SOC_CLOCK_OUT);
+    if (ret < 0) {
+        dev_err(dev, "Failed to set WM8731 SYSCLK: %d\n", ret);
+        return ret;
+    }
+
+    return 0;
+}
+
+static int soc_hsynth_init(struct snd_soc_pcm_runtime *rtd)
+{
+    struct snd_soc_dai *codec_dai = rtd->codec_dai;
+    struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
+    struct device *dev = rtd->card->dev;
+    unsigned int fmt;
+    int ret;
+
+    dev_dbg(dev, "init\n");
+
+    fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
+    SND_SOC_DAIFMT_CBS_CFS;
+
+    /* set cpu DAI configuration */
+    ret = snd_soc_dai_set_fmt(cpu_dai, fmt);
+    if (ret < 0)
+        return ret;
+
+    /* set codec DAI configuration */
+    ret = snd_soc_dai_set_fmt(codec_dai, fmt);
+    if (ret < 0)
+        return ret;
+
+    return 0;
+}
+
+static struct snd_soc_dai_link de1soc_dai[] = {
+	{ /* Primary DAI i/f */
+    .name = "SSND0",
+    .stream_name = "WM8731 PCM",
+    .cpu_dai_name = "ff200000.i2s",
+    .codec_dai_name = "wm8731-hifi",
+    .init = de1soc_wm8731_init,
+    .platform_name = "de1soc",
+    .codec_name = "wm8731.0-001a",
+    .ops = &de1soc_ops,
+	}, { /* Sec_Fifo Playback i/f */
+    .name = "SSND1",
+    .stream_name = "HSYNTH PCM",
+    .cpu_dai_name = "ff200000.dmalink",
+    .codec_dai_name = "hsynth7002-hifi",
+    .init = soc_hsynth_init,
+    .platform_name = "de1soc",
+    .codec_name = "hsynth7002.hsynth",
+	},
+};
+/*
+static struct snd_soc_dai_link hsynth_soc_dai = {
+    .name = "HSYNTH",
+    .stream_name = "HSYNTH PCM",
+    .cpu_dai_name = "ff200000.dmalink",
+    .codec_dai_name = "hsynth7002-hifi",
+    .init = soc_hsynth_init,
+    .platform_name = "de1soc",
+    .codec_name = "hsynth7002.hsynth",
+};
+*/
+static struct snd_soc_card snd_soc_de1soc = {
+    .name = "DE1SND",
+    .owner = THIS_MODULE,
+    .dai_link = de1soc_dai,
+//    .dai_link = &hsynth_soc_dai,
+    .num_links = ARRAY_SIZE(de1soc_dai),
+
+    .probe        = hmidi_card_probe,
+    .remove       = hmidi_card_remove,
+
+    .dapm_widgets = de1soc_dapm_widgets,
+    .num_dapm_widgets = ARRAY_SIZE(de1soc_dapm_widgets),
+    .dapm_routes = intercon,
+    .num_dapm_routes = ARRAY_SIZE(intercon),
+};
+
+static int de1soc_audio_probe(struct platform_device *pdev)
+{
+    struct device_node *np = pdev->dev.of_node;
+    struct device_node *codec_np, *cpu_np;
+    struct snd_soc_card *card = &snd_soc_de1soc;
+    int ret;
+
+    if (!np) {
+        return -ENODEV;
+    }
+
+    card->dev = &pdev->dev;
+
+    /* I2C bus is muxed between HPS and FPGA. Set mux to HPS */
+    i2c_mux_gpio = of_get_named_gpio(np, "i2c-mux-gpio", 0);
+    if (gpio_is_valid(i2c_mux_gpio)) {
+        ret = devm_gpio_request_one(&pdev->dev,
+            i2c_mux_gpio, GPIOF_OUT_INIT_LOW, "I2C_MUX");
+        if (ret) {
+            dev_err(&pdev->dev,
+                "Failed to request GPIO_%d for i2c_mux: %d\n",
+                i2c_mux_gpio, ret);
+            return ret;
+        }
+        gpio_set_value(i2c_mux_gpio, 1);
+    }
+
+    /* Parse codec1 info */
+    de1soc_dai[0].codec_name = NULL;
+    codec_np = of_parse_phandle(np, "audio-codec", 0);
+    if (!codec_np) {
+        dev_err(&pdev->dev, "audio-codec info missing\n");
+        return -EINVAL;
+    }
+    de1soc_dai[0].codec_of_node = codec_np;
+
+    /* Parse dai and platform info */
+    de1soc_dai[0].cpu_dai_name = NULL;
+    de1soc_dai[0].platform_name = NULL;
+    cpu_np = of_parse_phandle(np, "i2s-controller", 0);
+    if (!cpu_np) {
+        dev_err(&pdev->dev, "i2s dai1 and pcm info missing\n");
+        return -EINVAL;
+    }
+
+    de1soc_dai[0].cpu_of_node = cpu_np;
+    de1soc_dai[0].platform_of_node = cpu_np;
+
+    of_node_put(codec_np);
+    of_node_put(cpu_np);
+
+    /* Parse codec2 info */
+    de1soc_dai[1].codec_name = NULL;
+    codec_np = of_parse_phandle(np, "synth-codec", 0);
+    if (!codec_np) {
+        dev_err(&pdev->dev, "synth-codec info missing\n");
+        return -EINVAL;
+    }
+    de1soc_dai[1].codec_of_node = codec_np;
+
+    /* Parse dai and platform info */
+    de1soc_dai[1].cpu_dai_name = NULL;
+    de1soc_dai[1].platform_name = NULL;
+    cpu_np = of_parse_phandle(np, "dmalink-controller", 0);
+    if (!cpu_np) {
+        dev_err(&pdev->dev, "dmalink-controller info missing\n");
+        return -EINVAL;
+    }
+
+    de1soc_dai[1].cpu_of_node = cpu_np;
+    de1soc_dai[1].platform_of_node = cpu_np;
+
+    of_node_put(codec_np);
+    of_node_put(cpu_np);
+
+
+    ret = snd_soc_register_card(card);
+    if (ret) {
+        dev_err(&pdev->dev, "snd_soc_register_card() failed\n");
+    }
+
+    return ret;
+}
+
+static int de1soc_audio_remove(struct platform_device *pdev)
+{
+    struct snd_soc_card *card = platform_get_drvdata(pdev);
+
+    if (gpio_is_valid(i2c_mux_gpio))
+        devm_gpio_free(&pdev->dev, i2c_mux_gpio);
+
+    snd_soc_unregister_card(card);
+
+    return 0;
+}
+
+static const struct of_device_id de1soc_wm8731_dt_ids[] = {
+    { .compatible = "opencores,de1soc-wm8731-audio-midi", },
+    { }
+};
+MODULE_DEVICE_TABLE(of, de1soc_wm8731_dt_ids);
+
+static struct platform_driver de1soc_audio_driver = {
+    .driver = {
+        .name	= "de1soc-audio",
+        .owner	= THIS_MODULE,
+        .of_match_table = of_match_ptr(de1soc_wm8731_dt_ids),
+    },
+    .probe	= de1soc_audio_probe,
+    .remove	= de1soc_audio_remove,
+};
+
+module_platform_driver(de1soc_audio_driver);
+
+/* Module information */
+MODULE_AUTHOR("Bjarne Steinsbo <bsteinsbo@gmail.com>");
+MODULE_DESCRIPTION("ALSA SoC DE1-SoC_WM8731");
+MODULE_LICENSE("GPL");
diff --git a/sound/soc/socsynth/de1-soc-wm8731.c b/sound/soc/socsynth/de1-soc-wm8731.c
deleted file mode 100644
index 4e199bb..0000000
--- a/sound/soc/socsynth/de1-soc-wm8731.c
+++ /dev/null
@@ -1,247 +0,0 @@
-/*
- * de1-soc-wm8731 -- SoC audio for Terasic DE1-SoC board
- * Author: B. Steinsbo <bsteinsbo@gmail.com>
- *
- * Based on sam9g20_wm8731 by
- * Sedji Gaouaou <sedji.gaouaou@atmel.com>
- *
- * Licensed under the GPL-2.
- */
-
-#include <linux/module.h>
-#include <linux/kernel.h>
-#include <linux/clk.h>
-#include <linux/platform_device.h>
-#include <linux/of.h>
-#include <linux/gpio.h>
-#include <linux/of_gpio.h>
-
-#include <sound/core.h>
-#include <sound/pcm.h>
-#include <sound/pcm_params.h>
-#include <sound/soc.h>
-
-#define WM8731_SYSCLK_XTAL 1
-#define WM8731_SYSCLK_MCLK 2
-#define MCLK_RATE_48K 12288000 /* fs*256 */
-#define MCLK_RATE_44K 16934400 /* fs*384 */
-
-static unsigned int i2c_mux_gpio;
-
-static int de1soc_hw_params(struct snd_pcm_substream *substream,
-	struct snd_pcm_hw_params *params)
-{
-	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct snd_soc_dai *codec_dai = rtd->codec_dai;
-	struct device *dev = rtd->card->dev;
-	unsigned int mclk_freq;
-	int ret;
-
-	if ((params_rate(params) % 44100) == 0) {
-		mclk_freq = MCLK_RATE_44K;
-	} else if ((params_rate(params) % 48000) == 0) {
-		mclk_freq = MCLK_RATE_48K;
-	} else
-		return -EINVAL;
-
-	/* set codec mclk configuration */
-	ret = snd_soc_dai_set_sysclk(codec_dai, WM8731_SYSCLK_MCLK,
-		mclk_freq, SND_SOC_CLOCK_OUT);
-	if (ret < 0)
-		return ret;
-
-	dev_dbg(dev, "hw_params: mclk_freq=%d\n", mclk_freq);
-	return 0;
-}
-
-static void de1soc_shutdown(struct snd_pcm_substream *substream)
-{
-	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct snd_soc_dai *codec_dai = rtd->codec_dai;
-	struct device *dev = rtd->card->dev;
-	int ret;
-
-	dev_dbg(dev, "shutdown\n");
-	ret = snd_soc_dai_set_sysclk(codec_dai, WM8731_SYSCLK_MCLK,
-		0, SND_SOC_CLOCK_OUT);
-	if (ret < 0) {
-		dev_err(dev, "Failed to reset WM8731 SYSCLK: %d\n", ret);
-	}
-}
-
-static struct snd_soc_ops de1soc_ops = {
-	// .startup
-	.shutdown = de1soc_shutdown,
-	.hw_params = de1soc_hw_params,
-	// .hw_free
-	// .prepare
-	// .trigger
-};
-
-static const struct snd_soc_dapm_widget de1soc_dapm_widgets[] = {
-	SND_SOC_DAPM_HP("Headphone Jack", NULL),
-	SND_SOC_DAPM_MIC("Microphone Jack", NULL),
-	SND_SOC_DAPM_LINE("Line In Jack", NULL),
-	SND_SOC_DAPM_LINE("Line Out Jack", NULL),
-};
-
-static const struct snd_soc_dapm_route intercon[] = {
-	{"MICIN", NULL, "Mic Bias"},
-	{"Mic Bias", NULL, "Microphone Jack"},
-	{"LLINEIN", NULL, "Line In Jack"},
-	{"RLINEIN", NULL, "Line In Jack"},
-	{"Line Out Jack", NULL, "LOUT"},
-	{"Line Out Jack", NULL, "ROUT"},
-	{"Headphone Jack", NULL, "LHPOUT"},
-	{"Headphone Jack", NULL, "RHPOUT"},
-};
-
-static int de1soc_wm8731_init(struct snd_soc_pcm_runtime *rtd)
-{
-	struct snd_soc_dai *codec_dai = rtd->codec_dai;
-	struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
-	struct device *dev = rtd->card->dev;
-	unsigned int fmt;
-	int ret;
-
-	dev_dbg(dev, "init\n");
-
-	fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
-	      SND_SOC_DAIFMT_CBS_CFS;
-
-	/* set cpu DAI configuration */
-	ret = snd_soc_dai_set_fmt(cpu_dai, fmt);
-	if (ret < 0)
-		return ret;
-
-	/* set codec DAI configuration */
-	ret = snd_soc_dai_set_fmt(codec_dai, fmt);
-	if (ret < 0)
-		return ret;
-
-	/* Don't let codec constraints interfere */
-	ret = snd_soc_dai_set_sysclk(codec_dai, WM8731_SYSCLK_MCLK,
-		0, SND_SOC_CLOCK_OUT);
-	if (ret < 0) {
-		dev_err(dev, "Failed to set WM8731 SYSCLK: %d\n", ret);
-		return ret;
-	}
-
-	return 0;
-}
-
-static struct snd_soc_dai_link de1soc_dai = {
-	.name = "WM8731",
-	.stream_name = "WM8731 PCM",
-	.cpu_dai_name = "ff200000.i2s",
-	.codec_dai_name = "wm8731-hifi",
-	.init = de1soc_wm8731_init,
-	.platform_name = "de1soc",
-	.codec_name = "wm8731.0-001a",
-	.ops = &de1soc_ops,
-};
-
-static struct snd_soc_card snd_soc_de1soc = {
-	.name = "DE1SOC-WM8731",
-	.owner = THIS_MODULE,
-	.dai_link = &de1soc_dai,
-	.num_links = 1,
-
-	.dapm_widgets = de1soc_dapm_widgets,
-	.num_dapm_widgets = ARRAY_SIZE(de1soc_dapm_widgets),
-	.dapm_routes = intercon,
-	.num_dapm_routes = ARRAY_SIZE(intercon),
-};
-
-static int de1soc_audio_probe(struct platform_device *pdev)
-{
-	struct device_node *np = pdev->dev.of_node;
-	struct device_node *codec_np, *cpu_np;
-	struct snd_soc_card *card = &snd_soc_de1soc;
-	int ret;
-
-	if (!np) {
-		return -ENODEV;
-	}
-
-	card->dev = &pdev->dev;
-
-	/* I2C bus is muxed between HPS and FPGA. Set mux to HPS */
-	i2c_mux_gpio = of_get_named_gpio(np, "i2c-mux-gpio", 0);
-	if (gpio_is_valid(i2c_mux_gpio)) {
-		ret = devm_gpio_request_one(&pdev->dev,
-			i2c_mux_gpio, GPIOF_OUT_INIT_LOW, "I2C_MUX");
-		if (ret) {
-			dev_err(&pdev->dev,
-				"Failed to request GPIO_%d for i2c_mux: %d\n",
-				i2c_mux_gpio, ret);
-			return ret;
-		}
-		gpio_set_value(i2c_mux_gpio, 1);
-	}
-
-	/* Parse codec info */
-	de1soc_dai.codec_name = NULL;
-	codec_np = of_parse_phandle(np, "audio-codec", 0);
-	if (!codec_np) {
-		dev_err(&pdev->dev, "codec info missing\n");
-		return -EINVAL;
-	}
-	de1soc_dai.codec_of_node = codec_np;
-
-	/* Parse dai and platform info */
-	de1soc_dai.cpu_dai_name = NULL;
-	de1soc_dai.platform_name = NULL;
-	cpu_np = of_parse_phandle(np, "i2s-controller", 0);
-	if (!cpu_np) {
-		dev_err(&pdev->dev, "dai and pcm info missing\n");
-		return -EINVAL;
-	}
-	de1soc_dai.cpu_of_node = cpu_np;
-	de1soc_dai.platform_of_node = cpu_np;
-
-	of_node_put(codec_np);
-	of_node_put(cpu_np);
-
-	ret = snd_soc_register_card(card);
-	if (ret) {
-		dev_err(&pdev->dev, "snd_soc_register_card() failed\n");
-	}
-
-	return ret;
-}
-
-static int de1soc_audio_remove(struct platform_device *pdev)
-{
-	struct snd_soc_card *card = platform_get_drvdata(pdev);
-
-	if (gpio_is_valid(i2c_mux_gpio))
-		devm_gpio_free(&pdev->dev, i2c_mux_gpio);
-
-	snd_soc_unregister_card(card);
-
-	return 0;
-}
-
-static const struct of_device_id de1soc_wm8731_dt_ids[] = {
-	{ .compatible = "opencores,de1soc-wm8731-audio", },
-	{ }
-};
-MODULE_DEVICE_TABLE(of, de1soc_wm8731_dt_ids);
-
-static struct platform_driver de1soc_audio_driver = {
-	.driver = {
-		.name	= "de1soc-audio",
-		.owner	= THIS_MODULE,
-		.of_match_table = of_match_ptr(de1soc_wm8731_dt_ids),
-	},
-	.probe	= de1soc_audio_probe,
-	.remove	= de1soc_audio_remove,
-};
-
-module_platform_driver(de1soc_audio_driver);
-
-/* Module information */
-MODULE_AUTHOR("Bjarne Steinsbo <bsteinsbo@gmail.com>");
-MODULE_DESCRIPTION("ALSA SoC DE1-SoC_WM8731");
-MODULE_LICENSE("GPL");
diff --git a/sound/soc/socsynth/holosynthv.c b/sound/soc/socsynth/holosynthv.c
deleted file mode 100644
index 60104716d..0000000
--- a/sound/soc/socsynth/holosynthv.c
+++ /dev/null
@@ -1,292 +0,0 @@
-/*
- * hsynth-soc -- SoC audio ( midi for Altera SoC boards
- * Author: Michael Brown the-snowwhite <producer@holotronic.dk>
- *
- * Based on de1-soc-wm8731 by
- *  B. Steinsbo <bsteinsbo@gmail.com>
- *
- * Licensed under the GPL-2.
- */
-
-#include <linux/module.h>
-#include <linux/kernel.h>
-#include <linux/clk.h>
-#include <linux/platform_device.h>
-#include <linux/of.h>
-#include <linux/uaccess.h>
-#include <linux/ioport.h>
-#include <linux/io.h>
-
-#include <sound/core.h>
-#include <sound/seq_kernel.h>
-#include <sound/rawmidi.h>
-#include <sound/initval.h>
-#include <sound/pcm.h>
-#include <sound/pcm_params.h>
-#include <sound/soc.h>
-
-#define SYNTHSOCSOUND_LOG_PREFIX "synthsound: "
-
-#define HSYNTH_SYSCLK_MCLK 2
-//#define MCLK_RATE_48K 12288000 /* fs*256 */
-#define MCLK_RATE_44K 16934400 /* fs*384 */
-#define midi_ins 0
-#define midi_outs 1
-
-#define MIDIREG_BASE 0xff200000
-#define MIDIREG_SIZE PAGE_SIZE
-#define MIDIREG_OFFSET 0x50000
-
-#define printe(...) pr_err(SYNTHSOCSOUND_LOG_PREFIX __VA_ARGS__)
-
-static int snd_socmidi_open(struct snd_rawmidi_substream *substream);
-static int snd_socmidi_close(struct snd_rawmidi_substream *substream);
-static int hmidi_card_probe(struct snd_soc_card *card);
-static int hmidi_card_remove(struct snd_soc_card *card);
-static void snd_socmidi_transmit(unsigned char data);
-static void snd_socmidi_output_trigger(struct snd_rawmidi_substream *substream, int);
-static int hsound_midi_init(struct snd_card *card);
-
-void *midireg_mem;
-
-static int snd_socmidi_open(struct snd_rawmidi_substream *substream)
-{
-    return 0;
-}
-
-static int snd_socmidi_close(struct snd_rawmidi_substream *substream)
-{
-    return 0;
-}
-
-static int hmidi_card_probe(struct snd_soc_card *card)
-{
-    int err;
-
-    err = hsound_midi_init(card->snd_card);
-
-    if (err < 0) {
-        //		dev_dbg(&pdev->dev,"hsound_midi_init failed: %d\n", err);
-        return err;
-    }
-
-    return 0;
-}
-
-static int hmidi_card_remove(struct snd_soc_card *card)
-{
-    return 0;
-}
-
-static void snd_socmidi_transmit(unsigned char data){
-
-    iowrite8(data, midireg_mem);
-
-}
-
-static void snd_socmidi_output_trigger(struct snd_rawmidi_substream *substream, int up) {
-
-    if (!up)
-        return;
-
-    while (1) {
-        unsigned char data;
-        if (snd_rawmidi_transmit(substream, &data, 1) != 1)
-            break; /* no more data */
-            snd_socmidi_transmit(data);
-    }
-}
-
-static struct snd_rawmidi *g_rmidi;
-
-static struct snd_rawmidi_ops snd_socmidi_output_ops = {
-    .open = snd_socmidi_open,
-    .close = snd_socmidi_close,
-    .trigger = snd_socmidi_output_trigger,
-};
-
-static void pisnd_get_port_info(struct snd_rawmidi *rmidi, int number, struct snd_seq_port_info *seq_port_info)
-{
-    seq_port_info->type =
-    SNDRV_SEQ_PORT_TYPE_MIDI_GENERIC |
-    SNDRV_SEQ_PORT_TYPE_HARDWARE |
-    SNDRV_SEQ_PORT_TYPE_PORT;
-    seq_port_info->midi_voices = 0;
-}
-
-static struct snd_rawmidi_global_ops hsnd_global_ops = {.get_port_info = pisnd_get_port_info, };
-
-static int hsound_midi_init(struct snd_card *card)
-{
-    int err;
-    struct resource *res;
-
-    err = snd_rawmidi_new(card, "SocMIDI", 0, midi_outs, midi_ins, &g_rmidi);
-
-    if (err < 0) {
-        printe("snd_rawmidi_new failed: %d\n", err);
-        return err;
-    }
-
-    strcpy(g_rmidi->name, "Holosynth MIDI ");
-
-    g_rmidi->info_flags = SNDRV_RAWMIDI_INFO_OUTPUT;
-    // rmidi->info_flags = SNDRV_RAWMIDI_INFO_OUTPUT |
-    //                     SNDRV_RAWMIDI_INFO_INPUT |
-    //                     SNDRV_RAWMIDI_INFO_DUPLEX;
-
-    g_rmidi->ops = &hsnd_global_ops;
-
-    g_rmidi->private_data = (void *)0;
-
-    snd_rawmidi_set_ops(g_rmidi, SNDRV_RAWMIDI_STREAM_OUTPUT, &snd_socmidi_output_ops);
-    //    snd_rawmidi_set_ops(rmidi, SNDRV_RAWMIDI_STREAM_INPUT, &snd_socmidi_input_ops);
-
-    res = request_mem_region((MIDIREG_BASE + MIDIREG_OFFSET), MIDIREG_SIZE, "MIDIREG");
-    if (res == NULL) {
-        return -EBUSY;
-    }
-
-    midireg_mem = ioremap((MIDIREG_BASE + MIDIREG_OFFSET), MIDIREG_SIZE);
-    if (midireg_mem == NULL) {
-        release_mem_region(MIDIREG_BASE, MIDIREG_SIZE);
-        return -EFAULT;
-    }
-
-    return 0;
-}
-
-static const struct snd_soc_dapm_widget soc_dapm_widgets[] = {
-    SND_SOC_DAPM_LINE("Hsynth in", NULL),
-};
-
-static const struct snd_soc_dapm_route intercon[] = {
-    {"PDM_DAT", NULL, "Hsynth in"},
-};
-
-static int soc_hsynth_init(struct snd_soc_pcm_runtime *rtd)
-{
-    struct snd_soc_dai *codec_dai = rtd->codec_dai;
-    struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
-    struct device *dev = rtd->card->dev;
-    unsigned int fmt;
-    int ret;
-
-    dev_dbg(dev, "init\n");
-
-    fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
-    SND_SOC_DAIFMT_CBS_CFS;
-
-    /* set cpu DAI configuration */
-    ret = snd_soc_dai_set_fmt(cpu_dai, fmt);
-    if (ret < 0)
-        return ret;
-
-    /* set codec DAI configuration */
-    ret = snd_soc_dai_set_fmt(codec_dai, fmt);
-    if (ret < 0)
-        return ret;
-
-    return 0;
-}
-
-static struct snd_soc_dai_link hsynth_soc_dai = {
-    .name = "HSYNTH",
-    .stream_name = "HSYNTH PCM",
-    .cpu_dai_name = "ff200000.dmalink",
-    .codec_dai_name = "hsynth7002-hifi",
-    .init = soc_hsynth_init,
-    .platform_name = "socsynth",
-    .codec_name = "hsynth7002.hsynth",
-};
-
-static struct snd_soc_card snd_soc_hsynth_soc = {
-    .name = "HOLOSYNTHV",
-    .owner = THIS_MODULE,
-    .dai_link = &hsynth_soc_dai,
-    .num_links = 1,
-
-    .probe        = hmidi_card_probe,
-    .remove       = hmidi_card_remove,
-
-    .dapm_widgets = soc_dapm_widgets,
-    .num_dapm_widgets = ARRAY_SIZE(soc_dapm_widgets),
-    .dapm_routes = intercon,
-    .num_dapm_routes = ARRAY_SIZE(intercon),
-};
-
-static int hsynth_soc_audio_probe(struct platform_device *pdev)
-{
-    struct device_node *np = pdev->dev.of_node;
-    struct device_node *codec_np, *cpu_np;
-    struct snd_soc_card *card = &snd_soc_hsynth_soc;
-    int ret;
-
-    if (!np) {
-        return -ENODEV;
-    }
-
-    card->dev = &pdev->dev;
-
-    /* Parse codec info */
-    hsynth_soc_dai.codec_name = NULL;
-    codec_np = of_parse_phandle(np, "audio-codec", 0);
-    if (!codec_np) {
-        dev_err(&pdev->dev, "codec info missing\n");
-        return -EINVAL;
-    }
-    hsynth_soc_dai.codec_of_node = codec_np;
-
-    /* Parse dai and platform info */
-    hsynth_soc_dai.cpu_dai_name = NULL;
-    hsynth_soc_dai.platform_name = NULL;
-    cpu_np = of_parse_phandle(np, "dmalink-controller", 0);
-    if (!cpu_np) {
-        dev_err(&pdev->dev, "dai and pcm info missing\n");
-        return -EINVAL;
-    }
-    hsynth_soc_dai.cpu_of_node = cpu_np;
-    hsynth_soc_dai.platform_of_node = cpu_np;
-
-    of_node_put(codec_np);
-    of_node_put(cpu_np);
-
-    ret = snd_soc_register_card(card);
-    if (ret) {
-        dev_err(&pdev->dev, "snd_soc_register_card() failed\n");
-    }
-
-    return ret;
-}
-
-static int soc_audio_remove(struct platform_device *pdev)
-{
-    struct snd_soc_card *card = platform_get_drvdata(pdev);
-
-    snd_soc_unregister_card(card);
-
-    return 0;
-}
-
-static const struct of_device_id soc_hsynth_dt_ids[] = {
-    { .compatible = "holotr,socsynth-audio", },
-    { }
-};
-MODULE_DEVICE_TABLE(of, soc_hsynth_dt_ids);
-
-static struct platform_driver soc_audio_driver = {
-    .driver = {
-        .name	= "soc-synth-audio",
-        .owner	= THIS_MODULE,
-        .of_match_table = of_match_ptr(soc_hsynth_dt_ids),
-    },
-    .probe	= hsynth_soc_audio_probe,
-    .remove	= soc_audio_remove,
-};
-
-module_platform_driver(soc_audio_driver);
-
-/* Module information */
-MODULE_AUTHOR("Michael Brown (the-snowwhite) <producer@holotronic.dk>");
-MODULE_DESCRIPTION("ALSA SoC HOLOSYNTHV");
-MODULE_LICENSE("GPL");
-- 
2.7.4

